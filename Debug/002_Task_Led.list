
002_Task_Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e88  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007038  08007038  00008038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d0  080071d0  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  080071d0  080071d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d8  080071d8  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d8  080071d8  000081d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071dc  080071dc  000081dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080071e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000901c  2**0
                  CONTENTS
 10 .bss          0001448c  2000001c  2000001c  0000901c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  0000901c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156c9  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000318d  00000000  00000000  0001e715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  000218a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faf  00000000  00000000  00022d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c79  00000000  00000000  00023cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177ea  00000000  00000000  0004a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7e2e  00000000  00000000  00062122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00159f50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054f4  00000000  00000000  00159f94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  0015f488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007020 	.word	0x08007020

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000020 	.word	0x20000020
 80001ec:	08007020 	.word	0x08007020

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	20012ed4 	.word	0x20012ed4

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b96a 	b.w	8000570 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9d08      	ldr	r5, [sp, #32]
 80002ba:	460c      	mov	r4, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14e      	bne.n	800035e <__udivmoddi4+0xaa>
 80002c0:	4694      	mov	ip, r2
 80002c2:	458c      	cmp	ip, r1
 80002c4:	4686      	mov	lr, r0
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	d962      	bls.n	8000392 <__udivmoddi4+0xde>
 80002cc:	b14a      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002ce:	f1c2 0320 	rsb	r3, r2, #32
 80002d2:	4091      	lsls	r1, r2
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002dc:	4319      	orrs	r1, r3
 80002de:	fa00 fe02 	lsl.w	lr, r0, r2
 80002e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e6:	fa1f f68c 	uxth.w	r6, ip
 80002ea:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb07 1114 	mls	r1, r7, r4, r1
 80002f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fa:	fb04 f106 	mul.w	r1, r4, r6
 80002fe:	4299      	cmp	r1, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x64>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f104 30ff 	add.w	r0, r4, #4294967295
 800030a:	f080 8112 	bcs.w	8000532 <__udivmoddi4+0x27e>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 810f 	bls.w	8000532 <__udivmoddi4+0x27e>
 8000314:	3c02      	subs	r4, #2
 8000316:	4463      	add	r3, ip
 8000318:	1a59      	subs	r1, r3, r1
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000322:	fb07 1110 	mls	r1, r7, r0, r1
 8000326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032a:	fb00 f606 	mul.w	r6, r0, r6
 800032e:	429e      	cmp	r6, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x94>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 31ff 	add.w	r1, r0, #4294967295
 800033a:	f080 80fc 	bcs.w	8000536 <__udivmoddi4+0x282>
 800033e:	429e      	cmp	r6, r3
 8000340:	f240 80f9 	bls.w	8000536 <__udivmoddi4+0x282>
 8000344:	4463      	add	r3, ip
 8000346:	3802      	subs	r0, #2
 8000348:	1b9b      	subs	r3, r3, r6
 800034a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034e:	2100      	movs	r1, #0
 8000350:	b11d      	cbz	r5, 800035a <__udivmoddi4+0xa6>
 8000352:	40d3      	lsrs	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	e9c5 3200 	strd	r3, r2, [r5]
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	428b      	cmp	r3, r1
 8000360:	d905      	bls.n	800036e <__udivmoddi4+0xba>
 8000362:	b10d      	cbz	r5, 8000368 <__udivmoddi4+0xb4>
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	2100      	movs	r1, #0
 800036a:	4608      	mov	r0, r1
 800036c:	e7f5      	b.n	800035a <__udivmoddi4+0xa6>
 800036e:	fab3 f183 	clz	r1, r3
 8000372:	2900      	cmp	r1, #0
 8000374:	d146      	bne.n	8000404 <__udivmoddi4+0x150>
 8000376:	42a3      	cmp	r3, r4
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xcc>
 800037a:	4290      	cmp	r0, r2
 800037c:	f0c0 80f0 	bcc.w	8000560 <__udivmoddi4+0x2ac>
 8000380:	1a86      	subs	r6, r0, r2
 8000382:	eb64 0303 	sbc.w	r3, r4, r3
 8000386:	2001      	movs	r0, #1
 8000388:	2d00      	cmp	r5, #0
 800038a:	d0e6      	beq.n	800035a <__udivmoddi4+0xa6>
 800038c:	e9c5 6300 	strd	r6, r3, [r5]
 8000390:	e7e3      	b.n	800035a <__udivmoddi4+0xa6>
 8000392:	2a00      	cmp	r2, #0
 8000394:	f040 8090 	bne.w	80004b8 <__udivmoddi4+0x204>
 8000398:	eba1 040c 	sub.w	r4, r1, ip
 800039c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb08 4416 	mls	r4, r8, r6, r4
 80003b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b6:	fb07 f006 	mul.w	r0, r7, r6
 80003ba:	4298      	cmp	r0, r3
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x11c>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x11a>
 80003c8:	4298      	cmp	r0, r3
 80003ca:	f200 80cd 	bhi.w	8000568 <__udivmoddi4+0x2b4>
 80003ce:	4626      	mov	r6, r4
 80003d0:	1a1c      	subs	r4, r3, r0
 80003d2:	fa1f f38e 	uxth.w	r3, lr
 80003d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003da:	fb08 4410 	mls	r4, r8, r0, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb00 f707 	mul.w	r7, r0, r7
 80003e6:	429f      	cmp	r7, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x148>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x146>
 80003f4:	429f      	cmp	r7, r3
 80003f6:	f200 80b0 	bhi.w	800055a <__udivmoddi4+0x2a6>
 80003fa:	4620      	mov	r0, r4
 80003fc:	1bdb      	subs	r3, r3, r7
 80003fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0x9c>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa22 f706 	lsr.w	r7, r2, r6
 800040e:	431f      	orrs	r7, r3
 8000410:	fa20 fc06 	lsr.w	ip, r0, r6
 8000414:	fa04 f301 	lsl.w	r3, r4, r1
 8000418:	ea43 030c 	orr.w	r3, r3, ip
 800041c:	40f4      	lsrs	r4, r6
 800041e:	fa00 f801 	lsl.w	r8, r0, r1
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb4 fef0 	udiv	lr, r4, r0
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fb00 441e 	mls	r4, r0, lr, r4
 8000434:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000438:	fb0e f90c 	mul.w	r9, lr, ip
 800043c:	45a1      	cmp	r9, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	d90a      	bls.n	800045a <__udivmoddi4+0x1a6>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f10e 3aff 	add.w	sl, lr, #4294967295
 800044a:	f080 8084 	bcs.w	8000556 <__udivmoddi4+0x2a2>
 800044e:	45a1      	cmp	r9, r4
 8000450:	f240 8081 	bls.w	8000556 <__udivmoddi4+0x2a2>
 8000454:	f1ae 0e02 	sub.w	lr, lr, #2
 8000458:	443c      	add	r4, r7
 800045a:	eba4 0409 	sub.w	r4, r4, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb4 f3f0 	udiv	r3, r4, r0
 8000466:	fb00 4413 	mls	r4, r0, r3, r4
 800046a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	45a4      	cmp	ip, r4
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1d2>
 8000476:	193c      	adds	r4, r7, r4
 8000478:	f103 30ff 	add.w	r0, r3, #4294967295
 800047c:	d267      	bcs.n	800054e <__udivmoddi4+0x29a>
 800047e:	45a4      	cmp	ip, r4
 8000480:	d965      	bls.n	800054e <__udivmoddi4+0x29a>
 8000482:	3b02      	subs	r3, #2
 8000484:	443c      	add	r4, r7
 8000486:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800048a:	fba0 9302 	umull	r9, r3, r0, r2
 800048e:	eba4 040c 	sub.w	r4, r4, ip
 8000492:	429c      	cmp	r4, r3
 8000494:	46ce      	mov	lr, r9
 8000496:	469c      	mov	ip, r3
 8000498:	d351      	bcc.n	800053e <__udivmoddi4+0x28a>
 800049a:	d04e      	beq.n	800053a <__udivmoddi4+0x286>
 800049c:	b155      	cbz	r5, 80004b4 <__udivmoddi4+0x200>
 800049e:	ebb8 030e 	subs.w	r3, r8, lr
 80004a2:	eb64 040c 	sbc.w	r4, r4, ip
 80004a6:	fa04 f606 	lsl.w	r6, r4, r6
 80004aa:	40cb      	lsrs	r3, r1
 80004ac:	431e      	orrs	r6, r3
 80004ae:	40cc      	lsrs	r4, r1
 80004b0:	e9c5 6400 	strd	r6, r4, [r5]
 80004b4:	2100      	movs	r1, #0
 80004b6:	e750      	b.n	800035a <__udivmoddi4+0xa6>
 80004b8:	f1c2 0320 	rsb	r3, r2, #32
 80004bc:	fa20 f103 	lsr.w	r1, r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa24 f303 	lsr.w	r3, r4, r3
 80004c8:	4094      	lsls	r4, r2
 80004ca:	430c      	orrs	r4, r1
 80004cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d4:	fa1f f78c 	uxth.w	r7, ip
 80004d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004dc:	fb08 3110 	mls	r1, r8, r0, r3
 80004e0:	0c23      	lsrs	r3, r4, #16
 80004e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e6:	fb00 f107 	mul.w	r1, r0, r7
 80004ea:	4299      	cmp	r1, r3
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x24c>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f6:	d22c      	bcs.n	8000552 <__udivmoddi4+0x29e>
 80004f8:	4299      	cmp	r1, r3
 80004fa:	d92a      	bls.n	8000552 <__udivmoddi4+0x29e>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1a5b      	subs	r3, r3, r1
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb3 f1f8 	udiv	r1, r3, r8
 8000508:	fb08 3311 	mls	r3, r8, r1, r3
 800050c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000510:	fb01 f307 	mul.w	r3, r1, r7
 8000514:	42a3      	cmp	r3, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x276>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000520:	d213      	bcs.n	800054a <__udivmoddi4+0x296>
 8000522:	42a3      	cmp	r3, r4
 8000524:	d911      	bls.n	800054a <__udivmoddi4+0x296>
 8000526:	3902      	subs	r1, #2
 8000528:	4464      	add	r4, ip
 800052a:	1ae4      	subs	r4, r4, r3
 800052c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000530:	e739      	b.n	80003a6 <__udivmoddi4+0xf2>
 8000532:	4604      	mov	r4, r0
 8000534:	e6f0      	b.n	8000318 <__udivmoddi4+0x64>
 8000536:	4608      	mov	r0, r1
 8000538:	e706      	b.n	8000348 <__udivmoddi4+0x94>
 800053a:	45c8      	cmp	r8, r9
 800053c:	d2ae      	bcs.n	800049c <__udivmoddi4+0x1e8>
 800053e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000542:	eb63 0c07 	sbc.w	ip, r3, r7
 8000546:	3801      	subs	r0, #1
 8000548:	e7a8      	b.n	800049c <__udivmoddi4+0x1e8>
 800054a:	4631      	mov	r1, r6
 800054c:	e7ed      	b.n	800052a <__udivmoddi4+0x276>
 800054e:	4603      	mov	r3, r0
 8000550:	e799      	b.n	8000486 <__udivmoddi4+0x1d2>
 8000552:	4630      	mov	r0, r6
 8000554:	e7d4      	b.n	8000500 <__udivmoddi4+0x24c>
 8000556:	46d6      	mov	lr, sl
 8000558:	e77f      	b.n	800045a <__udivmoddi4+0x1a6>
 800055a:	4463      	add	r3, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74d      	b.n	80003fc <__udivmoddi4+0x148>
 8000560:	4606      	mov	r6, r0
 8000562:	4623      	mov	r3, r4
 8000564:	4608      	mov	r0, r1
 8000566:	e70f      	b.n	8000388 <__udivmoddi4+0xd4>
 8000568:	3e02      	subs	r6, #2
 800056a:	4463      	add	r3, ip
 800056c:	e730      	b.n	80003d0 <__udivmoddi4+0x11c>
 800056e:	bf00      	nop

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	@ 0x28
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fa6b 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f875 	bl	800066c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d3 	bl	800072c <MX_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8d1 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800058a:	4830      	ldr	r0, [pc, #192]	@ (800064c <main+0xd8>)
 800058c:	f004 fa94 	bl	8004ab8 <SEGGER_UART_init>



  //CYCLCNT enable the first bit
   DWT_CTRL |= ( 1 << 0);
 8000590:	4b2f      	ldr	r3, [pc, #188]	@ (8000650 <main+0xdc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a2e      	ldr	r2, [pc, #184]	@ (8000650 <main+0xdc>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

   SEGGER_SYSVIEW_Conf();
 800059c:	f004 f8b6 	bl	800470c <SEGGER_SYSVIEW_Conf>

   SEGGER_SYSVIEW_Start();
 80005a0:	f005 fe46 	bl	8006230 <SEGGER_SYSVIEW_Start>

   status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2302      	movs	r3, #2
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	22c8      	movs	r2, #200	@ 0xc8
 80005b2:	4928      	ldr	r1, [pc, #160]	@ (8000654 <main+0xe0>)
 80005b4:	4828      	ldr	r0, [pc, #160]	@ (8000658 <main+0xe4>)
 80005b6:	f002 f83e 	bl	8002636 <xTaskCreate>
 80005ba:	61f8      	str	r0, [r7, #28]
 //vérifie que l’allocation a réussi.

   configASSERT(status == pdPASS);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d00b      	beq.n	80005da <main+0x66>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c6:	f383 8811 	msr	BASEPRI, r3
 80005ca:	f3bf 8f6f 	isb	sy
 80005ce:	f3bf 8f4f 	dsb	sy
 80005d2:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <main+0x62>

   status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2302      	movs	r3, #2
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	22c8      	movs	r2, #200	@ 0xc8
 80005e8:	491c      	ldr	r1, [pc, #112]	@ (800065c <main+0xe8>)
 80005ea:	481d      	ldr	r0, [pc, #116]	@ (8000660 <main+0xec>)
 80005ec:	f002 f823 	bl	8002636 <xTaskCreate>
 80005f0:	61f8      	str	r0, [r7, #28]

   configASSERT(status == pdPASS);
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d00b      	beq.n	8000610 <main+0x9c>
    __asm volatile
 80005f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005fc:	f383 8811 	msr	BASEPRI, r3
 8000600:	f3bf 8f6f 	isb	sy
 8000604:	f3bf 8f4f 	dsb	sy
 8000608:	617b      	str	r3, [r7, #20]
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <main+0x98>

   status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2302      	movs	r3, #2
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	22c8      	movs	r2, #200	@ 0xc8
 800061c:	4911      	ldr	r1, [pc, #68]	@ (8000664 <main+0xf0>)
 800061e:	4812      	ldr	r0, [pc, #72]	@ (8000668 <main+0xf4>)
 8000620:	f002 f809 	bl	8002636 <xTaskCreate>
 8000624:	61f8      	str	r0, [r7, #28]

   configASSERT(status == pdPASS);
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d00b      	beq.n	8000644 <main+0xd0>
    __asm volatile
 800062c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000630:	f383 8811 	msr	BASEPRI, r3
 8000634:	f3bf 8f6f 	isb	sy
 8000638:	f3bf 8f4f 	dsb	sy
 800063c:	613b      	str	r3, [r7, #16]
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0xcc>

   //start the freeRTOS scheduler
   vTaskStartScheduler();
 8000644:	f002 f9d6 	bl	80029f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <main+0xd4>
 800064c:	0007a120 	.word	0x0007a120
 8000650:	e0001000 	.word	0xe0001000
 8000654:	08007038 	.word	0x08007038
 8000658:	08000795 	.word	0x08000795
 800065c:	08007048 	.word	0x08007048
 8000660:	080007c1 	.word	0x080007c1
 8000664:	08007058 	.word	0x08007058
 8000668:	080007ed 	.word	0x080007ed

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b094      	sub	sp, #80	@ 0x50
 8000670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	2230      	movs	r2, #48	@ 0x30
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f006 fc96 	bl	8006fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b23      	ldr	r3, [pc, #140]	@ (8000724 <SystemClock_Config+0xb8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	4a22      	ldr	r2, [pc, #136]	@ (8000724 <SystemClock_Config+0xb8>)
 800069a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069e:	6413      	str	r3, [r2, #64]	@ 0x40
 80006a0:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <SystemClock_Config+0xb8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <SystemClock_Config+0xbc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000728 <SystemClock_Config+0xbc>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <SystemClock_Config+0xbc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fcbb 	bl	800105c <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ec:	f000 f8a6 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f000 ff1e 	bl	800154c <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000716:	f000 f891 	bl	800083c <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	@ 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_GPIO_Init+0x60>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000748:	4a10      	ldr	r2, [pc, #64]	@ (800078c <MX_GPIO_Init+0x60>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_GPIO_Init+0x60>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000762:	480b      	ldr	r0, [pc, #44]	@ (8000790 <MX_GPIO_Init+0x64>)
 8000764:	f000 fc46 	bl	8000ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000768:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800076c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4804      	ldr	r0, [pc, #16]	@ (8000790 <MX_GPIO_Init+0x64>)
 8000780:	f000 fa8c 	bl	8000c9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020c00 	.word	0x40020c00

08000794 <led_green_handler>:

/* USER CODE BEGIN 4 */



static void led_green_handler(void* parameters){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	while(1){




		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 800079c:	4806      	ldr	r0, [pc, #24]	@ (80007b8 <led_green_handler+0x24>)
 800079e:	f006 fb57 	bl	8006e50 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80007a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <led_green_handler+0x28>)
 80007a8:	f000 fc3d 	bl	8001026 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		//vTaskDelay prend comme paramétre l fonction qui va calculer nbre de ticks , (Converts a time in milliseconds to a time in ticks)
		vTaskDelay(pdMS_TO_TICKS(400));
 80007ac:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007b0:	f002 f89e 	bl	80028f0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80007b4:	bf00      	nop
 80007b6:	e7f1      	b.n	800079c <led_green_handler+0x8>
 80007b8:	08007068 	.word	0x08007068
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <led_red_handler>:

	}
}
static void led_red_handler(void* parameters){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]


	while(1){


		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80007c8:	4806      	ldr	r0, [pc, #24]	@ (80007e4 <led_red_handler+0x24>)
 80007ca:	f006 fb41 	bl	8006e50 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80007ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <led_red_handler+0x28>)
 80007d4:	f000 fc27 	bl	8001026 <HAL_GPIO_TogglePin>
		//HAL_Delay(400);
		vTaskDelay(pdMS_TO_TICKS(400));
 80007d8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007dc:	f002 f888 	bl	80028f0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 80007e0:	bf00      	nop
 80007e2:	e7f1      	b.n	80007c8 <led_red_handler+0x8>
 80007e4:	0800707c 	.word	0x0800707c
 80007e8:	40020c00 	.word	0x40020c00

080007ec <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]


	while(1){


		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80007f4:	4806      	ldr	r0, [pc, #24]	@ (8000810 <led_orange_handler+0x24>)
 80007f6:	f006 fb2b 	bl	8006e50 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 80007fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <led_orange_handler+0x28>)
 8000800:	f000 fc11 	bl	8001026 <HAL_GPIO_TogglePin>
		//HAL_Delay(800);
		vTaskDelay(pdMS_TO_TICKS(400));
 8000804:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000808:	f002 f872 	bl	80028f0 <vTaskDelay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800080c:	bf00      	nop
 800080e:	e7f1      	b.n	80007f4 <led_orange_handler+0x8>
 8000810:	08007090 	.word	0x08007090
 8000814:	40020c00 	.word	0x40020c00

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 f935 	bl	8000a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <HAL_MspInit+0x4c>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085c:	6453      	str	r3, [r2, #68]	@ 0x44
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <HAL_MspInit+0x4c>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a08      	ldr	r2, [pc, #32]	@ (8000894 <HAL_MspInit+0x4c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <HAL_MspInit+0x4c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000886:	f003 fb05 	bl	8003e94 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	@ 0x38
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	4b33      	ldr	r3, [pc, #204]	@ (800097c <HAL_InitTick+0xe4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a32      	ldr	r2, [pc, #200]	@ (800097c <HAL_InitTick+0xe4>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b8:	4b30      	ldr	r3, [pc, #192]	@ (800097c <HAL_InitTick+0xe4>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008bc:	f003 0310 	and.w	r3, r3, #16
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c4:	f107 0210 	add.w	r2, r7, #16
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4611      	mov	r1, r2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 f808 	bl	80018e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008de:	f000 ffed 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 80008e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80008e4:	e004      	b.n	80008f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e6:	f000 ffe9 	bl	80018bc <HAL_RCC_GetPCLK1Freq>
 80008ea:	4603      	mov	r3, r0
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f2:	4a23      	ldr	r2, [pc, #140]	@ (8000980 <HAL_InitTick+0xe8>)
 80008f4:	fba2 2303 	umull	r2, r3, r2, r3
 80008f8:	0c9b      	lsrs	r3, r3, #18
 80008fa:	3b01      	subs	r3, #1
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fe:	4b21      	ldr	r3, [pc, #132]	@ (8000984 <HAL_InitTick+0xec>)
 8000900:	4a21      	ldr	r2, [pc, #132]	@ (8000988 <HAL_InitTick+0xf0>)
 8000902:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000904:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <HAL_InitTick+0xec>)
 8000906:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800090c:	4a1d      	ldr	r2, [pc, #116]	@ (8000984 <HAL_InitTick+0xec>)
 800090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000910:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000912:	4b1c      	ldr	r3, [pc, #112]	@ (8000984 <HAL_InitTick+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b1a      	ldr	r3, [pc, #104]	@ (8000984 <HAL_InitTick+0xec>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <HAL_InitTick+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000924:	4817      	ldr	r0, [pc, #92]	@ (8000984 <HAL_InitTick+0xec>)
 8000926:	f001 f80f 	bl	8001948 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000934:	2b00      	cmp	r3, #0
 8000936:	d11b      	bne.n	8000970 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000938:	4812      	ldr	r0, [pc, #72]	@ (8000984 <HAL_InitTick+0xec>)
 800093a:	f001 f85f 	bl	80019fc <HAL_TIM_Base_Start_IT>
 800093e:	4603      	mov	r3, r0
 8000940:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000944:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000948:	2b00      	cmp	r3, #0
 800094a:	d111      	bne.n	8000970 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800094c:	2036      	movs	r0, #54	@ 0x36
 800094e:	f000 f997 	bl	8000c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b0f      	cmp	r3, #15
 8000956:	d808      	bhi.n	800096a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	2036      	movs	r0, #54	@ 0x36
 800095e:	f000 f973 	bl	8000c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_InitTick+0xf4>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e002      	b.n	8000970 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000970:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000974:	4618      	mov	r0, r3
 8000976:	3738      	adds	r7, #56	@ 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	431bde83 	.word	0x431bde83
 8000984:	20000038 	.word	0x20000038
 8000988:	40001000 	.word	0x40001000
 800098c:	20000004 	.word	0x20000004

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <TIM6_DAC_IRQHandler+0x10>)
 80009ce:	f001 f885 	bl	8001adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000038 	.word	0x20000038

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a04:	f7ff ffea 	bl	80009dc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	@ (8000a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f006 fac5 	bl	8006fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd9f 	bl	8000574 <main>
  bx  lr    
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a44:	080071e0 	.word	0x080071e0
  ldr r2, =_sbss
 8000a48:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a4c:	200144a8 	.word	0x200144a8

08000a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <HAL_Init+0x40>)
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_Init+0x40>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_Init+0x40>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f8d8 	bl	8000c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	200f      	movs	r0, #15
 8000a84:	f7ff ff08 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fede 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <HAL_IncTick+0x24>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_IncTick+0x24>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000080 	.word	0x20000080

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000080 	.word	0x20000080

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db0b      	blt.n	8000b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 021f 	and.w	r2, r3, #31
 8000b54:	4907      	ldr	r1, [pc, #28]	@ (8000b74 <__NVIC_EnableIRQ+0x38>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	095b      	lsrs	r3, r3, #5
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	@ (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	@ (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	@ 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	@ 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ff4c 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5a:	f7ff ff61 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	6978      	ldr	r0, [r7, #20]
 8000c66:	f7ff ffb1 	bl	8000bcc <NVIC_EncodePriority>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff80 	bl	8000b78 <__NVIC_SetPriority>
}
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff ff54 	bl	8000b3c <__NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e177      	b.n	8000fa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8166 	bne.w	8000fa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80c0 	beq.w	8000fa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b66      	ldr	r3, [pc, #408]	@ (8000fc0 <HAL_GPIO_Init+0x324>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2a:	4a65      	ldr	r2, [pc, #404]	@ (8000fc0 <HAL_GPIO_Init+0x324>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e32:	4b63      	ldr	r3, [pc, #396]	@ (8000fc0 <HAL_GPIO_Init+0x324>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a61      	ldr	r2, [pc, #388]	@ (8000fc4 <HAL_GPIO_Init+0x328>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a58      	ldr	r2, [pc, #352]	@ (8000fc8 <HAL_GPIO_Init+0x32c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d037      	beq.n	8000eda <HAL_GPIO_Init+0x23e>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a57      	ldr	r2, [pc, #348]	@ (8000fcc <HAL_GPIO_Init+0x330>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d031      	beq.n	8000ed6 <HAL_GPIO_Init+0x23a>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a56      	ldr	r2, [pc, #344]	@ (8000fd0 <HAL_GPIO_Init+0x334>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d02b      	beq.n	8000ed2 <HAL_GPIO_Init+0x236>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a55      	ldr	r2, [pc, #340]	@ (8000fd4 <HAL_GPIO_Init+0x338>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d025      	beq.n	8000ece <HAL_GPIO_Init+0x232>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a54      	ldr	r2, [pc, #336]	@ (8000fd8 <HAL_GPIO_Init+0x33c>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d01f      	beq.n	8000eca <HAL_GPIO_Init+0x22e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a53      	ldr	r2, [pc, #332]	@ (8000fdc <HAL_GPIO_Init+0x340>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_GPIO_Init+0x22a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a52      	ldr	r2, [pc, #328]	@ (8000fe0 <HAL_GPIO_Init+0x344>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a51      	ldr	r2, [pc, #324]	@ (8000fe4 <HAL_GPIO_Init+0x348>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x222>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a50      	ldr	r2, [pc, #320]	@ (8000fe8 <HAL_GPIO_Init+0x34c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x21e>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4f      	ldr	r2, [pc, #316]	@ (8000fec <HAL_GPIO_Init+0x350>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000eb2:	2309      	movs	r3, #9
 8000eb4:	e012      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	e010      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000eba:	2308      	movs	r3, #8
 8000ebc:	e00e      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x240>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	@ (8000fc4 <HAL_GPIO_Init+0x328>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a34      	ldr	r2, [pc, #208]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b32      	ldr	r3, [pc, #200]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a29      	ldr	r2, [pc, #164]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b28      	ldr	r3, [pc, #160]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <HAL_GPIO_Init+0x354>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae84 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021c00 	.word	0x40021c00
 8000fe8:	40022000 	.word	0x40022000
 8000fec:	40022400 	.word	0x40022400
 8000ff0:	40013c00 	.word	0x40013c00

08000ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	807b      	strh	r3, [r7, #2]
 8001000:	4613      	mov	r3, r2
 8001002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001004:	787b      	ldrb	r3, [r7, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100a:	887a      	ldrh	r2, [r7, #2]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001010:	e003      	b.n	800101a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001012:	887b      	ldrh	r3, [r7, #2]
 8001014:	041a      	lsls	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	619a      	str	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	460b      	mov	r3, r1
 8001030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001038:	887a      	ldrh	r2, [r7, #2]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	041a      	lsls	r2, r3, #16
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43d9      	mvns	r1, r3
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	400b      	ands	r3, r1
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	619a      	str	r2, [r3, #24]
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e267      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d075      	beq.n	8001166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800107a:	4b88      	ldr	r3, [pc, #544]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4b85      	ldr	r3, [pc, #532]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800108e:	2b08      	cmp	r3, #8
 8001090:	d112      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b82      	ldr	r3, [pc, #520]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b7e      	ldr	r3, [pc, #504]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d05b      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d157      	bne.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e242      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x74>
 80010c2:	4b76      	ldr	r3, [pc, #472]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a75      	ldr	r2, [pc, #468]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b70      	ldr	r3, [pc, #448]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a6f      	ldr	r2, [pc, #444]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b6d      	ldr	r3, [pc, #436]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a6c      	ldr	r2, [pc, #432]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010f4:	4b69      	ldr	r3, [pc, #420]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a68      	ldr	r2, [pc, #416]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b66      	ldr	r3, [pc, #408]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a65      	ldr	r2, [pc, #404]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fcd4 	bl	8000ac0 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fcd0 	bl	8000ac0 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e207      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xc0>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fcc0 	bl	8000ac0 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fcbc 	bl	8000ac0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	@ 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1f3      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001172:	4b4a      	ldr	r3, [pc, #296]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b47      	ldr	r3, [pc, #284]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b44      	ldr	r3, [pc, #272]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b41      	ldr	r3, [pc, #260]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e1c7      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b3b      	ldr	r3, [pc, #236]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4937      	ldr	r1, [pc, #220]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b34      	ldr	r3, [pc, #208]	@ (80012a0 <HAL_RCC_OscConfig+0x244>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff fc75 	bl	8000ac0 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fc71 	bl	8000ac0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e1a8      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4925      	ldr	r1, [pc, #148]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_RCC_OscConfig+0x244>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc54 	bl	8000ac0 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fc50 	bl	8000ac0 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e187      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d036      	beq.n	80012b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_RCC_OscConfig+0x248>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fc34 	bl	8000ac0 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff fc30 	bl	8000ac0 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e167      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_RCC_OscConfig+0x240>)
 8001270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x200>
 800127a:	e01b      	b.n	80012b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_RCC_OscConfig+0x248>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fc1d 	bl	8000ac0 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e00e      	b.n	80012a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fc19 	bl	8000ac0 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d907      	bls.n	80012a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e150      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
 800129c:	40023800 	.word	0x40023800
 80012a0:	42470000 	.word	0x42470000
 80012a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	4b88      	ldr	r3, [pc, #544]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ea      	bne.n	800128a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8097 	beq.w	80013f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c6:	4b81      	ldr	r3, [pc, #516]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10f      	bne.n	80012f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b7d      	ldr	r3, [pc, #500]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a7c      	ldr	r2, [pc, #496]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b7a      	ldr	r3, [pc, #488]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ee:	2301      	movs	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f2:	4b77      	ldr	r3, [pc, #476]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d118      	bne.n	8001330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fe:	4b74      	ldr	r3, [pc, #464]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a73      	ldr	r2, [pc, #460]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 8001304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130a:	f7ff fbd9 	bl	8000ac0 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001312:	f7ff fbd5 	bl	8000ac0 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e10c      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	4b6a      	ldr	r3, [pc, #424]	@ (80014d0 <HAL_RCC_OscConfig+0x474>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x2ea>
 8001338:	4b64      	ldr	r3, [pc, #400]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800133c:	4a63      	ldr	r2, [pc, #396]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	@ 0x70
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x324>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x30c>
 800134e:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001352:	4a5e      	ldr	r2, [pc, #376]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6713      	str	r3, [r2, #112]	@ 0x70
 800135a:	4b5c      	ldr	r3, [pc, #368]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	4a5b      	ldr	r2, [pc, #364]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6713      	str	r3, [r2, #112]	@ 0x70
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x324>
 8001368:	4b58      	ldr	r3, [pc, #352]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136c:	4a57      	ldr	r2, [pc, #348]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	@ 0x70
 8001374:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001378:	4a54      	ldr	r2, [pc, #336]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 800137a:	f023 0304 	bic.w	r3, r3, #4
 800137e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d015      	beq.n	80013b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001388:	f7ff fb9a 	bl	8000ac0 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fb96 	bl	8000ac0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0cb      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a6:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ee      	beq.n	8001390 <HAL_RCC_OscConfig+0x334>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fb84 	bl	8000ac0 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ba:	e00a      	b.n	80013d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013bc:	f7ff fb80 	bl	8000ac0 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e0b5      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d2:	4b3e      	ldr	r3, [pc, #248]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1ee      	bne.n	80013bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4b39      	ldr	r3, [pc, #228]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a38      	ldr	r2, [pc, #224]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80a1 	beq.w	800153c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
 8001402:	2b08      	cmp	r3, #8
 8001404:	d05c      	beq.n	80014c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d141      	bne.n	8001492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b31      	ldr	r3, [pc, #196]	@ (80014d4 <HAL_RCC_OscConfig+0x478>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fb54 	bl	8000ac0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fb50 	bl	8000ac0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e087      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69da      	ldr	r2, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	3b01      	subs	r3, #1
 8001454:	041b      	lsls	r3, r3, #16
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800145c:	061b      	lsls	r3, r3, #24
 800145e:	491b      	ldr	r1, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001464:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x478>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fb29 	bl	8000ac0 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff fb25 	bl	8000ac0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e05c      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x416>
 8001490:	e054      	b.n	800153c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_RCC_OscConfig+0x478>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fb12 	bl	8000ac0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fb0e 	bl	8000ac0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e045      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_RCC_OscConfig+0x470>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x444>
 80014be:	e03d      	b.n	800153c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e038      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000
 80014d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_RCC_OscConfig+0x4ec>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d028      	beq.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d121      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d11a      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001508:	4013      	ands	r3, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800150e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001510:	4293      	cmp	r3, r2
 8001512:	d111      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	3b01      	subs	r3, #1
 8001522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0cc      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b68      	ldr	r3, [pc, #416]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d90c      	bls.n	8001588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b65      	ldr	r3, [pc, #404]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b63      	ldr	r3, [pc, #396]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b8      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a58      	ldr	r2, [pc, #352]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b53      	ldr	r3, [pc, #332]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b50      	ldr	r3, [pc, #320]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494d      	ldr	r1, [pc, #308]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d044      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b47      	ldr	r3, [pc, #284]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b3f      	ldr	r3, [pc, #252]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e067      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4934      	ldr	r1, [pc, #208]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fa40 	bl	8000ac0 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fa3c 	bl	8000ac0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e04f      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20c      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e032      	b.n	80016fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4916      	ldr	r1, [pc, #88]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016be:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490e      	ldr	r1, [pc, #56]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f821 	bl	8001718 <HAL_RCC_GetSysClockFreq>
 80016d6:	4602      	mov	r2, r0
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	490a      	ldr	r1, [pc, #40]	@ (800170c <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	5ccb      	ldrb	r3, [r1, r3]
 80016e6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f8d0 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023c00 	.word	0x40023c00
 8001708:	40023800 	.word	0x40023800
 800170c:	0800717c 	.word	0x0800717c
 8001710:	20000000 	.word	0x20000000
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800171c:	b090      	sub	sp, #64	@ 0x40
 800171e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001730:	4b59      	ldr	r3, [pc, #356]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x180>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d00d      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x40>
 800173c:	2b08      	cmp	r3, #8
 800173e:	f200 80a1 	bhi.w	8001884 <HAL_RCC_GetSysClockFreq+0x16c>
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <HAL_RCC_GetSysClockFreq+0x34>
 8001746:	2b04      	cmp	r3, #4
 8001748:	d003      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x3a>
 800174a:	e09b      	b.n	8001884 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b53      	ldr	r3, [pc, #332]	@ (800189c <HAL_RCC_GetSysClockFreq+0x184>)
 800174e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001750:	e09b      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001752:	4b53      	ldr	r3, [pc, #332]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001756:	e098      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001758:	4b4f      	ldr	r3, [pc, #316]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x180>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001760:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001762:	4b4d      	ldr	r3, [pc, #308]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x180>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d028      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176e:	4b4a      	ldr	r3, [pc, #296]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x180>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	2200      	movs	r2, #0
 8001776:	623b      	str	r3, [r7, #32]
 8001778:	627a      	str	r2, [r7, #36]	@ 0x24
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001780:	2100      	movs	r1, #0
 8001782:	4b47      	ldr	r3, [pc, #284]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001784:	fb03 f201 	mul.w	r2, r3, r1
 8001788:	2300      	movs	r3, #0
 800178a:	fb00 f303 	mul.w	r3, r0, r3
 800178e:	4413      	add	r3, r2
 8001790:	4a43      	ldr	r2, [pc, #268]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001792:	fba0 1202 	umull	r1, r2, r0, r2
 8001796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001798:	460a      	mov	r2, r1
 800179a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800179c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800179e:	4413      	add	r3, r2
 80017a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a4:	2200      	movs	r2, #0
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	61fa      	str	r2, [r7, #28]
 80017aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80017b2:	f7fe fd67 	bl	8000284 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017be:	e053      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c0:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x180>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	2200      	movs	r2, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	617a      	str	r2, [r7, #20]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017d2:	f04f 0b00 	mov.w	fp, #0
 80017d6:	4652      	mov	r2, sl
 80017d8:	465b      	mov	r3, fp
 80017da:	f04f 0000 	mov.w	r0, #0
 80017de:	f04f 0100 	mov.w	r1, #0
 80017e2:	0159      	lsls	r1, r3, #5
 80017e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e8:	0150      	lsls	r0, r2, #5
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	ebb2 080a 	subs.w	r8, r2, sl
 80017f2:	eb63 090b 	sbc.w	r9, r3, fp
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001802:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001806:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800180a:	ebb2 0408 	subs.w	r4, r2, r8
 800180e:	eb63 0509 	sbc.w	r5, r3, r9
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	00eb      	lsls	r3, r5, #3
 800181c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001820:	00e2      	lsls	r2, r4, #3
 8001822:	4614      	mov	r4, r2
 8001824:	461d      	mov	r5, r3
 8001826:	eb14 030a 	adds.w	r3, r4, sl
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	eb45 030b 	adc.w	r3, r5, fp
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800183e:	4629      	mov	r1, r5
 8001840:	028b      	lsls	r3, r1, #10
 8001842:	4621      	mov	r1, r4
 8001844:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001848:	4621      	mov	r1, r4
 800184a:	028a      	lsls	r2, r1, #10
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001852:	2200      	movs	r2, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	60fa      	str	r2, [r7, #12]
 8001858:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800185c:	f7fe fd12 	bl	8000284 <__aeabi_uldivmod>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4613      	mov	r3, r2
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001868:	4b0b      	ldr	r3, [pc, #44]	@ (8001898 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	3301      	adds	r3, #1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800187a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001882:	e002      	b.n	800188a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_RCC_GetSysClockFreq+0x184>)
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800188c:	4618      	mov	r0, r3
 800188e:	3740      	adds	r7, #64	@ 0x40
 8001890:	46bd      	mov	sp, r7
 8001892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	00f42400 	.word	0x00f42400
 80018a0:	017d7840 	.word	0x017d7840

080018a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c0:	f7ff fff0 	bl	80018a4 <HAL_RCC_GetHCLKFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	0a9b      	lsrs	r3, r3, #10
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	4903      	ldr	r1, [pc, #12]	@ (80018e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d8:	4618      	mov	r0, r3
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40023800 	.word	0x40023800
 80018e0:	0800718c 	.word	0x0800718c

080018e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	220f      	movs	r2, #15
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 0203 	and.w	r2, r3, #3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001900:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001918:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_RCC_GetClockConfig+0x5c>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	08db      	lsrs	r3, r3, #3
 800191e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <HAL_RCC_GetClockConfig+0x60>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 020f 	and.w	r2, r3, #15
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e041      	b.n	80019de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d106      	bne.n	8001974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f839 	bl	80019e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3304      	adds	r3, #4
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f000 f9c0 	bl	8001d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d001      	beq.n	8001a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e04e      	b.n	8001ab2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2202      	movs	r2, #2
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d022      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a3e:	d01d      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d018      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d013      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1c      	ldr	r2, [pc, #112]	@ (8001acc <HAL_TIM_Base_Start_IT+0xd0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00e      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1b      	ldr	r2, [pc, #108]	@ (8001ad0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d009      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d004      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0x80>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a18      	ldr	r2, [pc, #96]	@ (8001ad8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d111      	bne.n	8001aa0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d010      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9e:	e007      	b.n	8001ab0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	40000400 	.word	0x40000400
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40000c00 	.word	0x40000c00
 8001ad0:	40010400 	.word	0x40010400
 8001ad4:	40014000 	.word	0x40014000
 8001ad8:	40001800 	.word	0x40001800

08001adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d020      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01b      	beq.n	8001b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0202 	mvn.w	r2, #2
 8001b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f8d2 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001b2c:	e005      	b.n	8001b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f8c4 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8d5 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d020      	beq.n	8001b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f06f 0204 	mvn.w	r2, #4
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f8ac 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001b78:	e005      	b.n	8001b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f89e 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8af 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d020      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01b      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0208 	mvn.w	r2, #8
 8001ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2204      	movs	r2, #4
 8001bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f886 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001bc4:	e005      	b.n	8001bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f878 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f889 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d020      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0310 	and.w	r3, r3, #16
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01b      	beq.n	8001c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f06f 0210 	mvn.w	r2, #16
 8001bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f860 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
 8001c10:	e005      	b.n	8001c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f852 	bl	8001cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f863 	bl	8001ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0201 	mvn.w	r2, #1
 8001c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fde8 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00c      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f906 	bl	8001e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00c      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f834 	bl	8001cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00c      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 0220 	mvn.w	r2, #32
 8001cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8d8 	bl	8001e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a46      	ldr	r2, [pc, #280]	@ (8001e38 <TIM_Base_SetConfig+0x12c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d013      	beq.n	8001d4c <TIM_Base_SetConfig+0x40>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d2a:	d00f      	beq.n	8001d4c <TIM_Base_SetConfig+0x40>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a43      	ldr	r2, [pc, #268]	@ (8001e3c <TIM_Base_SetConfig+0x130>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00b      	beq.n	8001d4c <TIM_Base_SetConfig+0x40>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a42      	ldr	r2, [pc, #264]	@ (8001e40 <TIM_Base_SetConfig+0x134>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d007      	beq.n	8001d4c <TIM_Base_SetConfig+0x40>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a41      	ldr	r2, [pc, #260]	@ (8001e44 <TIM_Base_SetConfig+0x138>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d003      	beq.n	8001d4c <TIM_Base_SetConfig+0x40>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a40      	ldr	r2, [pc, #256]	@ (8001e48 <TIM_Base_SetConfig+0x13c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d108      	bne.n	8001d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a35      	ldr	r2, [pc, #212]	@ (8001e38 <TIM_Base_SetConfig+0x12c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02b      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d6c:	d027      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a32      	ldr	r2, [pc, #200]	@ (8001e3c <TIM_Base_SetConfig+0x130>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d023      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a31      	ldr	r2, [pc, #196]	@ (8001e40 <TIM_Base_SetConfig+0x134>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a30      	ldr	r2, [pc, #192]	@ (8001e44 <TIM_Base_SetConfig+0x138>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01b      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a2f      	ldr	r2, [pc, #188]	@ (8001e48 <TIM_Base_SetConfig+0x13c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d017      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <TIM_Base_SetConfig+0x140>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a2d      	ldr	r2, [pc, #180]	@ (8001e50 <TIM_Base_SetConfig+0x144>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00f      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e54 <TIM_Base_SetConfig+0x148>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00b      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a2b      	ldr	r2, [pc, #172]	@ (8001e58 <TIM_Base_SetConfig+0x14c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <TIM_Base_SetConfig+0x150>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <TIM_Base_SetConfig+0xb2>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a29      	ldr	r2, [pc, #164]	@ (8001e60 <TIM_Base_SetConfig+0x154>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d108      	bne.n	8001dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <TIM_Base_SetConfig+0x12c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <TIM_Base_SetConfig+0xf8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <TIM_Base_SetConfig+0x13c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d103      	bne.n	8001e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d105      	bne.n	8001e2a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f023 0201 	bic.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40010400 	.word	0x40010400
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40014400 	.word	0x40014400
 8001e54:	40014800 	.word	0x40014800
 8001e58:	40001800 	.word	0x40001800
 8001e5c:	40001c00 	.word	0x40001c00
 8001e60:	40002000 	.word	0x40002000

08001e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f103 0208 	add.w	r2, r3, #8
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 0208 	add.w	r2, r3, #8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 0208 	add.w	r2, r3, #8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8001ec0:	f240 1019 	movw	r0, #281	@ 0x119
 8001ec4:	f004 fcf8 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8001ede:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8001ee2:	f004 fce9 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d103      	bne.n	8001f0e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e00c      	b.n	8001f28 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3308      	adds	r3, #8
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e002      	b.n	8001f1c <vListInsert+0x2e>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d2f6      	bcs.n	8001f16 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8001f54:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8001f58:	f004 fcae 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6892      	ldr	r2, [r2, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6852      	ldr	r2, [r2, #4]
 8001f84:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d103      	bne.n	8001f98 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f240 101d 	movw	r0, #285	@ 0x11d
 8001fb2:	f004 fcbd 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10b      	bne.n	8001ff2 <xQueueGenericReset+0x30>
    __asm volatile
 8001fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	60fb      	str	r3, [r7, #12]
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d052      	beq.n	800209e <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d04e      	beq.n	800209e <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	2100      	movs	r1, #0
 800200a:	fba3 2302 	umull	r2, r3, r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d000      	beq.n	8002014 <xQueueGenericReset+0x52>
 8002012:	2101      	movs	r1, #1
 8002014:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002016:	2b00      	cmp	r3, #0
 8002018:	d141      	bne.n	800209e <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800201a:	f001 ffbb 	bl	8003f94 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	6939      	ldr	r1, [r7, #16]
 8002028:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	441a      	add	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2200      	movs	r2, #0
 8002038:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204a:	3b01      	subs	r3, #1
 800204c:	6939      	ldr	r1, [r7, #16]
 800204e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	441a      	add	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	22ff      	movs	r2, #255	@ 0xff
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	22ff      	movs	r2, #255	@ 0xff
 8002066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00f      	beq.n	8002098 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	3310      	adds	r3, #16
 800207c:	4618      	mov	r0, r3
 800207e:	f001 f829 	bl	80030d4 <xTaskRemoveFromEventList>
 8002082:	e009      	b.n	8002098 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	3310      	adds	r3, #16
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff feff 	bl	8001e8c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	3324      	adds	r3, #36	@ 0x24
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fefa 	bl	8001e8c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002098:	f001 ffae 	bl	8003ff8 <vPortExitCritical>
 800209c:	e001      	b.n	80020a2 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10b      	bne.n	80020c0 <xQueueGenericReset+0xfe>
    __asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	60bb      	str	r3, [r7, #8]
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	e7fd      	b.n	80020bc <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4619      	mov	r1, r3
 80020c4:	2096      	movs	r0, #150	@ 0x96
 80020c6:	f004 fc33 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80020ca:	697b      	ldr	r3, [r7, #20]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02e      	beq.n	800214a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80020ec:	2100      	movs	r1, #0
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	fba3 2302 	umull	r2, r3, r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d000      	beq.n	80020fc <xQueueGenericCreate+0x28>
 80020fa:	2101      	movs	r1, #1
 80020fc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d123      	bne.n	800214a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800210a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800210e:	d81c      	bhi.n	800214a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	3350      	adds	r3, #80	@ 0x50
 800211e:	4618      	mov	r0, r3
 8002120:	f002 f866 	bl	80041f0 <pvPortMalloc>
 8002124:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01d      	beq.n	8002168 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3350      	adds	r3, #80	@ 0x50
 8002134:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002136:	79fa      	ldrb	r2, [r7, #7]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f81e 	bl	8002184 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002148:	e00e      	b.n	8002168 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10b      	bne.n	8002168 <xQueueGenericCreate+0x94>
    __asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	613b      	str	r3, [r7, #16]
}
 8002162:	bf00      	nop
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	4618      	mov	r0, r3
 800216c:	f004 fd7a 	bl	8006c64 <SEGGER_SYSVIEW_ShrinkId>
 8002170:	4603      	mov	r3, r0
 8002172:	4619      	mov	r1, r3
 8002174:	2098      	movs	r0, #152	@ 0x98
 8002176:	f004 fbdb 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800217a:	69fb      	ldr	r3, [r7, #28]
    }
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d103      	bne.n	80021a0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e002      	b.n	80021a6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021b2:	2101      	movs	r1, #1
 80021b4:	69b8      	ldr	r0, [r7, #24]
 80021b6:	f7ff ff04 	bl	8001fc2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	@ 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80021e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10b      	bne.n	80021fe <xQueueReceive+0x32>
    __asm volatile
 80021e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	623b      	str	r3, [r7, #32]
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	e7fd      	b.n	80021fa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <xQueueReceive+0x40>
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <xQueueReceive+0x44>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <xQueueReceive+0x46>
 8002210:	2300      	movs	r3, #0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <xQueueReceive+0x62>
    __asm volatile
 8002216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	61fb      	str	r3, [r7, #28]
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	e7fd      	b.n	800222a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800222e:	f001 f96d 	bl	800350c <xTaskGetSchedulerState>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <xQueueReceive+0x72>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <xQueueReceive+0x76>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <xQueueReceive+0x78>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <xQueueReceive+0x94>
    __asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	61bb      	str	r3, [r7, #24]
}
 800225a:	bf00      	nop
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002260:	f001 fe98 	bl	8003f94 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	2b00      	cmp	r3, #0
 800226e:	d018      	beq.n	80022a2 <xQueueReceive+0xd6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002274:	f000 f88e 	bl	8002394 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	1e5a      	subs	r2, r3, #1
 800227c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228a:	3310      	adds	r3, #16
 800228c:	4618      	mov	r0, r3
 800228e:	f000 ff21 	bl	80030d4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002292:	f001 feb1 	bl	8003ff8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 8002296:	2101      	movs	r1, #1
 8002298:	20a4      	movs	r0, #164	@ 0xa4
 800229a:	f004 fb49 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 800229e:	2301      	movs	r3, #1
 80022a0:	e071      	b.n	8002386 <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80022a8:	f001 fea6 	bl	8003ff8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80022ac:	2100      	movs	r1, #0
 80022ae:	20a4      	movs	r0, #164	@ 0xa4
 80022b0:	f004 fb3e 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e066      	b.n	8002386 <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 80022b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80022be:	f107 0310 	add.w	r3, r7, #16
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 ffe6 	bl	8003294 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80022cc:	f001 fe94 	bl	8003ff8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80022d0:	f000 fbea 	bl	8002aa8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022d4:	f001 fe5e 	bl	8003f94 <vPortEnterCritical>
 80022d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d103      	bne.n	80022ee <xQueueReceive+0x122>
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d103      	bne.n	8002304 <xQueueReceive+0x138>
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002304:	f001 fe78 	bl	8003ff8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002308:	1d3a      	adds	r2, r7, #4
 800230a:	f107 0310 	add.w	r3, r7, #16
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f000 ffd7 	bl	80032c4 <xTaskCheckForTimeOut>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d123      	bne.n	8002364 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800231c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800231e:	f000 f8b1 	bl	8002484 <prvIsQueueEmpty>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232a:	3324      	adds	r3, #36	@ 0x24
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4611      	mov	r1, r2
 8002330:	4618      	mov	r0, r3
 8002332:	f000 fe5d 	bl	8002ff0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002338:	f000 f852 	bl	80023e0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800233c:	f000 fbc2 	bl	8002ac4 <xTaskResumeAll>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d18c      	bne.n	8002260 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002346:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <xQueueReceive+0x1c4>)
 8002348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	e783      	b.n	8002260 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800235a:	f000 f841 	bl	80023e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800235e:	f000 fbb1 	bl	8002ac4 <xTaskResumeAll>
 8002362:	e77d      	b.n	8002260 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002366:	f000 f83b 	bl	80023e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800236a:	f000 fbab 	bl	8002ac4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800236e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002370:	f000 f888 	bl	8002484 <prvIsQueueEmpty>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	f43f af72 	beq.w	8002260 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800237c:	2100      	movs	r1, #0
 800237e:	20a4      	movs	r0, #164	@ 0xa4
 8002380:	f004 fad6 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002384:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002386:	4618      	mov	r0, r3
 8002388:	3730      	adds	r7, #48	@ 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000ed04 	.word	0xe000ed04

08002394 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d018      	beq.n	80023d8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ae:	441a      	add	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d303      	bcc.n	80023c8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68d9      	ldr	r1, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	461a      	mov	r2, r3
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f004 fe16 	bl	8007004 <memcpy>
    }
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80023e8:	f001 fdd4 	bl	8003f94 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023f2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80023f4:	e011      	b.n	800241a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3324      	adds	r3, #36	@ 0x24
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fe66 	bl	80030d4 <xTaskRemoveFromEventList>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800240e:	f000 ffc5 	bl	800339c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3b01      	subs	r3, #1
 8002416:	b2db      	uxtb	r3, r3
 8002418:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	2b00      	cmp	r3, #0
 8002420:	dce9      	bgt.n	80023f6 <prvUnlockQueue+0x16>
 8002422:	e000      	b.n	8002426 <prvUnlockQueue+0x46>
                    break;
 8002424:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	22ff      	movs	r2, #255	@ 0xff
 800242a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800242e:	f001 fde3 	bl	8003ff8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002432:	f001 fdaf 	bl	8003f94 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800243c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800243e:	e011      	b.n	8002464 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d012      	beq.n	800246e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3310      	adds	r3, #16
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fe41 	bl	80030d4 <xTaskRemoveFromEventList>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002458:	f000 ffa0 	bl	800339c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	3b01      	subs	r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002468:	2b00      	cmp	r3, #0
 800246a:	dce9      	bgt.n	8002440 <prvUnlockQueue+0x60>
 800246c:	e000      	b.n	8002470 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800246e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	22ff      	movs	r2, #255	@ 0xff
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002478:	f001 fdbe 	bl	8003ff8 <vPortExitCritical>
}
 800247c:	bf00      	nop
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800248c:	f001 fd82 	bl	8003f94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e001      	b.n	80024a2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80024a2:	f001 fda9 	bl	8003ff8 <vPortExitCritical>

    return xReturn;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <vQueueAddToRegistry+0x2c>
    __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	60fb      	str	r3, [r7, #12]
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d024      	beq.n	800252c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e01e      	b.n	8002526 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80024e8:	4a18      	ldr	r2, [pc, #96]	@ (800254c <vQueueAddToRegistry+0x9c>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4413      	add	r3, r2
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d105      	bne.n	8002504 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4a13      	ldr	r2, [pc, #76]	@ (800254c <vQueueAddToRegistry+0x9c>)
 80024fe:	4413      	add	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
                    break;
 8002502:	e013      	b.n	800252c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10a      	bne.n	8002520 <vQueueAddToRegistry+0x70>
 800250a:	4a10      	ldr	r2, [pc, #64]	@ (800254c <vQueueAddToRegistry+0x9c>)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <vQueueAddToRegistry+0x9c>)
 800251c:	4413      	add	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b07      	cmp	r3, #7
 800252a:	d9dd      	bls.n	80024e8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d005      	beq.n	800253e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 800253e:	20b6      	movs	r0, #182	@ 0xb6
 8002540:	f004 f9ba 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002544:	bf00      	nop
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000084 	.word	0x20000084

08002550 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002560:	f001 fd18 	bl	8003f94 <vPortEnterCritical>
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800256a:	b25b      	sxtb	r3, r3
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d103      	bne.n	800257a <vQueueWaitForMessageRestricted+0x2a>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002580:	b25b      	sxtb	r3, r3
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d103      	bne.n	8002590 <vQueueWaitForMessageRestricted+0x40>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002590:	f001 fd32 	bl	8003ff8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	3324      	adds	r3, #36	@ 0x24
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68b9      	ldr	r1, [r7, #8]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fd4b 	bl	8003040 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f7ff ff18 	bl	80023e0 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80025b0:	20b9      	movs	r0, #185	@ 0xb9
 80025b2:	f004 f981 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08a      	sub	sp, #40	@ 0x28
 80025c2:	af04      	add	r7, sp, #16
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fe0d 	bl	80041f0 <pvPortMalloc>
 80025d6:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80025de:	2058      	movs	r0, #88	@ 0x58
 80025e0:	f001 fe06 	bl	80041f0 <pvPortMalloc>
 80025e4:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80025ec:	2258      	movs	r2, #88	@ 0x58
 80025ee:	2100      	movs	r1, #0
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f004 fcdb 	bl	8006fac <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80025fc:	e005      	b.n	800260a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80025fe:	6938      	ldr	r0, [r7, #16]
 8002600:	f001 ff28 	bl	8004454 <vPortFree>
 8002604:	e001      	b.n	800260a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002610:	2300      	movs	r3, #0
 8002612:	9303      	str	r3, [sp, #12]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	9302      	str	r3, [sp, #8]
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f82d 	bl	8002686 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800262c:	697b      	ldr	r3, [r7, #20]
    }
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002636:	b580      	push	{r7, lr}
 8002638:	b088      	sub	sp, #32
 800263a:	af02      	add	r7, sp, #8
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff ffb3 	bl	80025be <prvCreateTask>
 8002658:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002660:	6938      	ldr	r0, [r7, #16]
 8002662:	f000 f8a1 	bl	80027a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002666:	2301      	movs	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e002      	b.n	8002672 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800266c:	f04f 33ff 	mov.w	r3, #4294967295
 8002670:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4619      	mov	r1, r3
 8002676:	20c2      	movs	r0, #194	@ 0xc2
 8002678:	f004 f95a 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800267c:	697b      	ldr	r3, [r7, #20]
    }
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b088      	sub	sp, #32
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002696:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	21a5      	movs	r1, #165	@ 0xa5
 80026a0:	f004 fc84 	bl	8006fac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80026a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80026ae:	3b01      	subs	r3, #1
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f023 0307 	bic.w	r3, r3, #7
 80026bc:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00b      	beq.n	80026e0 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80026c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026cc:	f383 8811 	msr	BASEPRI, r3
 80026d0:	f3bf 8f6f 	isb	sy
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	617b      	str	r3, [r7, #20]
}
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01e      	beq.n	8002724 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e012      	b.n	8002712 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	7819      	ldrb	r1, [r3, #0]
 80026f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	3334      	adds	r3, #52	@ 0x34
 80026fc:	460a      	mov	r2, r1
 80026fe:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	3301      	adds	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	2b09      	cmp	r3, #9
 8002716:	d9e9      	bls.n	80026ec <prvInitialiseNewTask+0x66>
 8002718:	e000      	b.n	800271c <prvInitialiseNewTask+0x96>
            {
                break;
 800271a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	2b04      	cmp	r3, #4
 8002728:	d90b      	bls.n	8002742 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	613b      	str	r3, [r7, #16]
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	e7fd      	b.n	800273e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002744:	2b04      	cmp	r3, #4
 8002746:	d901      	bls.n	800274c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002748:	2304      	movs	r3, #4
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002756:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275a:	3304      	adds	r3, #4
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fbb7 	bl	8001ed0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002764:	3318      	adds	r3, #24
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fbb2 	bl	8001ed0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800276c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002770:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002774:	f1c3 0205 	rsb	r2, r3, #5
 8002778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800277c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	69b8      	ldr	r0, [r7, #24]
 8002788:	f001 fa08 	bl	8003b9c <pxPortInitialiseStack>
 800278c:	4602      	mov	r2, r0
 800278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002790:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800279c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80027a8:	b5b0      	push	{r4, r5, r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80027b0:	f001 fbf0 	bl	8003f94 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80027b4:	4b48      	ldr	r3, [pc, #288]	@ (80028d8 <prvAddNewTaskToReadyList+0x130>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	4a47      	ldr	r2, [pc, #284]	@ (80028d8 <prvAddNewTaskToReadyList+0x130>)
 80027bc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80027be:	4b47      	ldr	r3, [pc, #284]	@ (80028dc <prvAddNewTaskToReadyList+0x134>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80027c6:	4a45      	ldr	r2, [pc, #276]	@ (80028dc <prvAddNewTaskToReadyList+0x134>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027cc:	4b42      	ldr	r3, [pc, #264]	@ (80028d8 <prvAddNewTaskToReadyList+0x130>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d110      	bne.n	80027f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80027d4:	f000 fe00 	bl	80033d8 <prvInitialiseTaskLists>
 80027d8:	e00d      	b.n	80027f6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80027da:	4b41      	ldr	r3, [pc, #260]	@ (80028e0 <prvAddNewTaskToReadyList+0x138>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027e2:	4b3e      	ldr	r3, [pc, #248]	@ (80028dc <prvAddNewTaskToReadyList+0x134>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d802      	bhi.n	80027f6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80027f0:	4a3a      	ldr	r2, [pc, #232]	@ (80028dc <prvAddNewTaskToReadyList+0x134>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80027f6:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <prvAddNewTaskToReadyList+0x13c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	4a39      	ldr	r2, [pc, #228]	@ (80028e4 <prvAddNewTaskToReadyList+0x13c>)
 80027fe:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002800:	4b38      	ldr	r3, [pc, #224]	@ (80028e4 <prvAddNewTaskToReadyList+0x13c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d016      	beq.n	800283c <prvAddNewTaskToReadyList+0x94>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	f004 f901 	bl	8006a18 <SEGGER_SYSVIEW_OnTaskCreate>
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	461d      	mov	r5, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	461c      	mov	r4, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	1ae3      	subs	r3, r4, r3
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	462b      	mov	r3, r5
 8002838:	f002 f80a 	bl	8004850 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f96e 	bl	8006b20 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002848:	2201      	movs	r2, #1
 800284a:	409a      	lsls	r2, r3
 800284c:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <prvAddNewTaskToReadyList+0x140>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <prvAddNewTaskToReadyList+0x140>)
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285a:	4924      	ldr	r1, [pc, #144]	@ (80028ec <prvAddNewTaskToReadyList+0x144>)
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3304      	adds	r3, #4
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	3204      	adds	r2, #4
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	1d1a      	adds	r2, r3, #4
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4a14      	ldr	r2, [pc, #80]	@ (80028ec <prvAddNewTaskToReadyList+0x144>)
 800289a:	441a      	add	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a4:	4911      	ldr	r1, [pc, #68]	@ (80028ec <prvAddNewTaskToReadyList+0x144>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028b6:	1c59      	adds	r1, r3, #1
 80028b8:	480c      	ldr	r0, [pc, #48]	@ (80028ec <prvAddNewTaskToReadyList+0x144>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4403      	add	r3, r0
 80028c4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80028c6:	f001 fb97 	bl	8003ff8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <prvAddNewTaskToReadyList+0x138>)
 80028cc:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bdb0      	pop	{r4, r5, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000019c 	.word	0x2000019c
 80028dc:	200000c4 	.word	0x200000c4
 80028e0:	200001a8 	.word	0x200001a8
 80028e4:	200001b8 	.word	0x200001b8
 80028e8:	200001a4 	.word	0x200001a4
 80028ec:	200000c8 	.word	0x200000c8

080028f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d018      	beq.n	8002934 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002902:	f000 f8d1 	bl	8002aa8 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002906:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <vTaskDelay+0x68>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00b      	beq.n	8002926 <vTaskDelay+0x36>
    __asm volatile
 800290e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	60bb      	str	r3, [r7, #8]
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	e7fd      	b.n	8002922 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002926:	2100      	movs	r1, #0
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fe11 	bl	8003550 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800292e:	f000 f8c9 	bl	8002ac4 <xTaskResumeAll>
 8002932:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d107      	bne.n	800294a <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800293a:	4b08      	ldr	r3, [pc, #32]	@ (800295c <vTaskDelay+0x6c>)
 800293c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 800294a:	20c5      	movs	r0, #197	@ 0xc5
 800294c:	f003 ffb4 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	200001c4 	.word	0x200001c4
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08a      	sub	sp, #40	@ 0x28
 8002964:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	e011      	b.n	8002998 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002974:	4a1c      	ldr	r2, [pc, #112]	@ (80029e8 <prvCreateIdleTasks+0x88>)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4413      	add	r3, r2
 800297a:	7819      	ldrb	r1, [r3, #0]
 800297c:	1d3a      	adds	r2, r7, #4
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4413      	add	r3, r2
 8002982:	460a      	mov	r2, r1
 8002984:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002986:	1d3a      	adds	r2, r7, #4
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4413      	add	r3, r2
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3301      	adds	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b09      	cmp	r3, #9
 800299c:	ddea      	ble.n	8002974 <prvCreateIdleTasks+0x14>
 800299e:	e000      	b.n	80029a2 <prvCreateIdleTasks+0x42>
        {
            break;
 80029a0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e015      	b.n	80029d4 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <prvCreateIdleTasks+0x8c>)
 80029aa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <prvCreateIdleTasks+0x90>)
 80029b2:	4413      	add	r3, r2
 80029b4:	1d39      	adds	r1, r7, #4
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2300      	movs	r3, #0
 80029be:	2282      	movs	r2, #130	@ 0x82
 80029c0:	6938      	ldr	r0, [r7, #16]
 80029c2:	f7ff fe38 	bl	8002636 <xTaskCreate>
 80029c6:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	dde6      	ble.n	80029a8 <prvCreateIdleTasks+0x48>
 80029da:	e000      	b.n	80029de <prvCreateIdleTasks+0x7e>
        {
            break;
 80029dc:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80029de:	69fb      	ldr	r3, [r7, #28]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	080070a4 	.word	0x080070a4
 80029ec:	080033b5 	.word	0x080033b5
 80029f0:	200001c0 	.word	0x200001c0

080029f4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80029fa:	f7ff ffb1 	bl	8002960 <prvCreateIdleTasks>
 80029fe:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d102      	bne.n	8002a0c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002a06:	f000 fe31 	bl	800366c <xTimerCreateTimerTask>
 8002a0a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d124      	bne.n	8002a5c <vTaskStartScheduler+0x68>
    __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	60bb      	str	r3, [r7, #8]
}
 8002a24:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <vTaskStartScheduler+0x9c>)
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <vTaskStartScheduler+0xa0>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a34:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <vTaskStartScheduler+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <vTaskStartScheduler+0xa8>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <vTaskStartScheduler+0xac>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d102      	bne.n	8002a4c <vTaskStartScheduler+0x58>
 8002a46:	f003 ffcb 	bl	80069e0 <SEGGER_SYSVIEW_OnIdle>
 8002a4a:	e004      	b.n	8002a56 <vTaskStartScheduler+0x62>
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <vTaskStartScheduler+0xac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 f823 	bl	8006a9c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        // Configure le timer système et démarre la première tâche.

        ( void ) xPortStartScheduler();
 8002a56:	f001 f92d 	bl	8003cb4 <xPortStartScheduler>
 8002a5a:	e00f      	b.n	8002a7c <vTaskStartScheduler+0x88>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a62:	d10b      	bne.n	8002a7c <vTaskStartScheduler+0x88>
    __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	607b      	str	r3, [r7, #4]
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <vTaskStartScheduler+0xb0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002a80:	20cd      	movs	r0, #205	@ 0xcd
 8002a82:	f003 ff19 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200001bc 	.word	0x200001bc
 8002a94:	200001a8 	.word	0x200001a8
 8002a98:	200001a0 	.word	0x200001a0
 8002a9c:	200001c0 	.word	0x200001c0
 8002aa0:	200000c4 	.word	0x200000c4
 8002aa4:	2000000c 	.word	0x2000000c

08002aa8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <vTaskSuspendAll+0x18>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	4a03      	ldr	r2, [pc, #12]	@ (8002ac0 <vTaskSuspendAll+0x18>)
 8002ab4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002ab6:	20cf      	movs	r0, #207	@ 0xcf
 8002ab8:	f003 fefe 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200001c4 	.word	0x200001c4

08002ac4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002ad2:	f001 fa5f 	bl	8003f94 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002ada:	4b73      	ldr	r3, [pc, #460]	@ (8002ca8 <xTaskResumeAll+0x1e4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <xTaskResumeAll+0x36>
    __asm volatile
 8002ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	603b      	str	r3, [r7, #0]
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	e7fd      	b.n	8002af6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002afa:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca8 <xTaskResumeAll+0x1e4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	4a69      	ldr	r2, [pc, #420]	@ (8002ca8 <xTaskResumeAll+0x1e4>)
 8002b02:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002b04:	4b68      	ldr	r3, [pc, #416]	@ (8002ca8 <xTaskResumeAll+0x1e4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 80c0 	bne.w	8002c8e <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b0e:	4b67      	ldr	r3, [pc, #412]	@ (8002cac <xTaskResumeAll+0x1e8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80bb 	beq.w	8002c8e <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b18:	e092      	b.n	8002c40 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b1a:	4b65      	ldr	r3, [pc, #404]	@ (8002cb0 <xTaskResumeAll+0x1ec>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	69fa      	ldr	r2, [r7, #28]
 8002b2e:	6a12      	ldr	r2, [r2, #32]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	69d2      	ldr	r2, [r2, #28]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3318      	adds	r3, #24
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d103      	bne.n	8002b50 <xTaskResumeAll+0x8c>
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2200      	movs	r2, #0
 8002b54:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1e5a      	subs	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	6892      	ldr	r2, [r2, #8]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d103      	bne.n	8002b8e <xTaskResumeAll+0xca>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	2200      	movs	r2, #0
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 ffbd 	bl	8006b20 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	2201      	movs	r2, #1
 8002bac:	409a      	lsls	r2, r3
 8002bae:	4b41      	ldr	r3, [pc, #260]	@ (8002cb4 <xTaskResumeAll+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	4a3f      	ldr	r2, [pc, #252]	@ (8002cb4 <xTaskResumeAll+0x1f0>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbc:	493e      	ldr	r1, [pc, #248]	@ (8002cb8 <xTaskResumeAll+0x1f4>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	60da      	str	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	3204      	adds	r2, #4
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	1d1a      	adds	r2, r3, #4
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb8 <xTaskResumeAll+0x1f4>)
 8002bfc:	441a      	add	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	615a      	str	r2, [r3, #20]
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c06:	492c      	ldr	r1, [pc, #176]	@ (8002cb8 <xTaskResumeAll+0x1f4>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c18:	1c59      	adds	r1, r3, #1
 8002c1a:	4827      	ldr	r0, [pc, #156]	@ (8002cb8 <xTaskResumeAll+0x1f4>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4403      	add	r3, r0
 8002c26:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2c:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <xTaskResumeAll+0x1f8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d904      	bls.n	8002c40 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002c36:	4a22      	ldr	r2, [pc, #136]	@ (8002cc0 <xTaskResumeAll+0x1fc>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <xTaskResumeAll+0x1ec>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af68 	bne.w	8002b1a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002c50:	f000 fc40 	bl	80034d4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <xTaskResumeAll+0x200>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002c60:	f000 f85a 	bl	8002d18 <xTaskIncrementTick>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d004      	beq.n	8002c74 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002c6a:	4a15      	ldr	r2, [pc, #84]	@ (8002cc0 <xTaskResumeAll+0x1fc>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ef      	bne.n	8002c60 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002c80:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <xTaskResumeAll+0x200>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002c86:	4a0e      	ldr	r2, [pc, #56]	@ (8002cc0 <xTaskResumeAll+0x1fc>)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002c8e:	f001 f9b3 	bl	8003ff8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	4619      	mov	r1, r3
 8002c96:	20d0      	movs	r0, #208	@ 0xd0
 8002c98:	f003 fe4a 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002c9c:	697b      	ldr	r3, [r7, #20]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200001c4 	.word	0x200001c4
 8002cac:	2000019c 	.word	0x2000019c
 8002cb0:	2000015c 	.word	0x2000015c
 8002cb4:	200001a4 	.word	0x200001a4
 8002cb8:	200000c8 	.word	0x200000c8
 8002cbc:	200000c4 	.word	0x200000c4
 8002cc0:	200001b0 	.word	0x200001b0
 8002cc4:	200001ac 	.word	0x200001ac

08002cc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <xTaskGetTickCount+0x20>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	20d1      	movs	r0, #209	@ 0xd1
 8002cd8:	f003 fe2a 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8002cdc:	687b      	ldr	r3, [r7, #4]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200001a0 	.word	0x200001a0

08002cec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cf2:	f001 fa3b 	bl	800416c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <xTaskGetTickCountFromISR+0x28>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002d00:	6839      	ldr	r1, [r7, #0]
 8002d02:	20d2      	movs	r0, #210	@ 0xd2
 8002d04:	f003 fe14 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002d08:	683b      	ldr	r3, [r7, #0]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200001a0 	.word	0x200001a0

08002d18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d22:	4b74      	ldr	r3, [pc, #464]	@ (8002ef4 <xTaskIncrementTick+0x1dc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 80d4 	bne.w	8002ed4 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d2c:	4b72      	ldr	r3, [pc, #456]	@ (8002ef8 <xTaskIncrementTick+0x1e0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d34:	4a70      	ldr	r2, [pc, #448]	@ (8002ef8 <xTaskIncrementTick+0x1e0>)
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d121      	bne.n	8002d84 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d40:	4b6e      	ldr	r3, [pc, #440]	@ (8002efc <xTaskIncrementTick+0x1e4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <xTaskIncrementTick+0x4a>
    __asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	607b      	str	r3, [r7, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <xTaskIncrementTick+0x46>
 8002d62:	4b66      	ldr	r3, [pc, #408]	@ (8002efc <xTaskIncrementTick+0x1e4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61fb      	str	r3, [r7, #28]
 8002d68:	4b65      	ldr	r3, [pc, #404]	@ (8002f00 <xTaskIncrementTick+0x1e8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a63      	ldr	r2, [pc, #396]	@ (8002efc <xTaskIncrementTick+0x1e4>)
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	4a63      	ldr	r2, [pc, #396]	@ (8002f00 <xTaskIncrementTick+0x1e8>)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b63      	ldr	r3, [pc, #396]	@ (8002f04 <xTaskIncrementTick+0x1ec>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	4a61      	ldr	r2, [pc, #388]	@ (8002f04 <xTaskIncrementTick+0x1ec>)
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	f000 fba8 	bl	80034d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d84:	4b60      	ldr	r3, [pc, #384]	@ (8002f08 <xTaskIncrementTick+0x1f0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	f0c0 80a7 	bcc.w	8002ede <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d90:	4b5a      	ldr	r3, [pc, #360]	@ (8002efc <xTaskIncrementTick+0x1e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f08 <xTaskIncrementTick+0x1f0>)
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	601a      	str	r2, [r3, #0]
                    break;
 8002da2:	e09c      	b.n	8002ede <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002da4:	4b55      	ldr	r3, [pc, #340]	@ (8002efc <xTaskIncrementTick+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d203      	bcs.n	8002dc4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002dbc:	4a52      	ldr	r2, [pc, #328]	@ (8002f08 <xTaskIncrementTick+0x1f0>)
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6013      	str	r3, [r2, #0]
                        break;
 8002dc2:	e08c      	b.n	8002ede <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	68d2      	ldr	r2, [r2, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	6892      	ldr	r2, [r2, #8]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	3304      	adds	r3, #4
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d103      	bne.n	8002df2 <xTaskIncrementTick+0xda>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	1e5a      	subs	r2, r3, #1
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01e      	beq.n	8002e48 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	6a12      	ldr	r2, [r2, #32]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	69d2      	ldr	r2, [r2, #28]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d103      	bne.n	8002e38 <xTaskIncrementTick+0x120>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f003 fe68 	bl	8006b20 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <xTaskIncrementTick+0x1f4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f0c <xTaskIncrementTick+0x1f4>)
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e66:	492a      	ldr	r1, [pc, #168]	@ (8002f10 <xTaskIncrementTick+0x1f8>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3304      	adds	r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	3204      	adds	r2, #4
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1d1a      	adds	r2, r3, #4
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f10 <xTaskIncrementTick+0x1f8>)
 8002ea6:	441a      	add	r2, r3
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	615a      	str	r2, [r3, #20]
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb0:	4917      	ldr	r1, [pc, #92]	@ (8002f10 <xTaskIncrementTick+0x1f8>)
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	4812      	ldr	r0, [pc, #72]	@ (8002f10 <xTaskIncrementTick+0x1f8>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4403      	add	r3, r0
 8002ed0:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ed2:	e75d      	b.n	8002d90 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <xTaskIncrementTick+0x1fc>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a0e      	ldr	r2, [pc, #56]	@ (8002f14 <xTaskIncrementTick+0x1fc>)
 8002edc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	20db      	movs	r0, #219	@ 0xdb
 8002ee4:	f003 fd24 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	@ 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200001c4 	.word	0x200001c4
 8002ef8:	200001a0 	.word	0x200001a0
 8002efc:	20000154 	.word	0x20000154
 8002f00:	20000158 	.word	0x20000158
 8002f04:	200001b4 	.word	0x200001b4
 8002f08:	200001bc 	.word	0x200001bc
 8002f0c:	200001a4 	.word	0x200001a4
 8002f10:	200000c8 	.word	0x200000c8
 8002f14:	200001ac 	.word	0x200001ac

08002f18 <vTaskSwitchContext>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    // vTaskSwitchContext : Sélectionne la prochaine tâche à exécuter.
    void vTaskSwitchContext( void )
    {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <vTaskSwitchContext+0xc0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002f26:	4b2d      	ldr	r3, [pc, #180]	@ (8002fdc <vTaskSwitchContext+0xc4>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002f2c:	e04f      	b.n	8002fce <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fdc <vTaskSwitchContext+0xc4>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f34:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <vTaskSwitchContext+0xc8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002f42:	7afb      	ldrb	r3, [r7, #11]
 8002f44:	f1c3 031f 	rsb	r3, r3, #31
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	4926      	ldr	r1, [pc, #152]	@ (8002fe4 <vTaskSwitchContext+0xcc>)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10b      	bne.n	8002f76 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	607b      	str	r3, [r7, #4]
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <vTaskSwitchContext+0x5a>
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <vTaskSwitchContext+0xcc>)
 8002f82:	4413      	add	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3308      	adds	r3, #8
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d103      	bne.n	8002fa4 <vTaskSwitchContext+0x8c>
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe8 <vTaskSwitchContext+0xd0>)
 8002fac:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002fae:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <vTaskSwitchContext+0xd4>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe8 <vTaskSwitchContext+0xd0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d102      	bne.n	8002fc0 <vTaskSwitchContext+0xa8>
 8002fba:	f003 fd11 	bl	80069e0 <SEGGER_SYSVIEW_OnIdle>
 8002fbe:	e004      	b.n	8002fca <vTaskSwitchContext+0xb2>
 8002fc0:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <vTaskSwitchContext+0xd0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 fd69 	bl	8006a9c <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <vTaskSwitchContext+0xd0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
    }
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200001c4 	.word	0x200001c4
 8002fdc:	200001b0 	.word	0x200001b0
 8002fe0:	200001a4 	.word	0x200001a4
 8002fe4:	200000c8 	.word	0x200000c8
 8002fe8:	200000c4 	.word	0x200000c4
 8002fec:	200001c0 	.word	0x200001c0

08002ff0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003004:	f383 8811 	msr	BASEPRI, r3
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	f3bf 8f4f 	dsb	sy
 8003010:	60fb      	str	r3, [r7, #12]
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <vTaskPlaceOnEventList+0x4c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3318      	adds	r3, #24
 800301e:	4619      	mov	r1, r3
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fe ff64 	bl	8001eee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003026:	2101      	movs	r1, #1
 8003028:	6838      	ldr	r0, [r7, #0]
 800302a:	f000 fa91 	bl	8003550 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 800302e:	20e1      	movs	r0, #225	@ 0xe1
 8003030:	f003 fc42 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003034:	bf00      	nop
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200000c4 	.word	0x200000c4

08003040 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	613b      	str	r3, [r7, #16]
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	e7fd      	b.n	8003066 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	4b17      	ldr	r3, [pc, #92]	@ (80030d0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	61da      	str	r2, [r3, #28]
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <vTaskPlaceOnEventListRestricted+0x90>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	621a      	str	r2, [r3, #32]
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	3218      	adds	r2, #24
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <vTaskPlaceOnEventListRestricted+0x90>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f103 0218 	add.w	r2, r3, #24
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <vTaskPlaceOnEventListRestricted+0x90>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f000 fa48 	bl	8003550 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 80030c0:	20e3      	movs	r0, #227	@ 0xe3
 80030c2:	f003 fbf9 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200000c4 	.word	0x200000c4

080030d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	@ 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	60fb      	str	r3, [r7, #12]
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	e7fd      	b.n	80030fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003106:	61fb      	str	r3, [r7, #28]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	6a12      	ldr	r2, [r2, #32]
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	6a3a      	ldr	r2, [r7, #32]
 8003118:	69d2      	ldr	r2, [r2, #28]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	3318      	adds	r3, #24
 8003124:	429a      	cmp	r2, r3
 8003126:	d103      	bne.n	8003130 <xTaskRemoveFromEventList+0x5c>
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	6a1a      	ldr	r2, [r3, #32]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003140:	4b4e      	ldr	r3, [pc, #312]	@ (800327c <xTaskRemoveFromEventList+0x1a8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d164      	bne.n	8003212 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	68d2      	ldr	r2, [r2, #12]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	6a3a      	ldr	r2, [r7, #32]
 800315e:	6892      	ldr	r2, [r2, #8]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	3304      	adds	r3, #4
 800316a:	429a      	cmp	r2, r3
 800316c:	d103      	bne.n	8003176 <xTaskRemoveFromEventList+0xa2>
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fcc9 	bl	8006b20 <SEGGER_SYSVIEW_OnTaskStartReady>
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	2201      	movs	r2, #1
 8003194:	409a      	lsls	r2, r3
 8003196:	4b3a      	ldr	r3, [pc, #232]	@ (8003280 <xTaskRemoveFromEventList+0x1ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4313      	orrs	r3, r2
 800319c:	4a38      	ldr	r2, [pc, #224]	@ (8003280 <xTaskRemoveFromEventList+0x1ac>)
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a4:	4937      	ldr	r1, [pc, #220]	@ (8003284 <xTaskRemoveFromEventList+0x1b0>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3304      	adds	r3, #4
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	3204      	adds	r2, #4
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	1d1a      	adds	r2, r3, #4
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a28      	ldr	r2, [pc, #160]	@ (8003284 <xTaskRemoveFromEventList+0x1b0>)
 80031e4:	441a      	add	r2, r3
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ee:	4925      	ldr	r1, [pc, #148]	@ (8003284 <xTaskRemoveFromEventList+0x1b0>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003200:	1c59      	adds	r1, r3, #1
 8003202:	4820      	ldr	r0, [pc, #128]	@ (8003284 <xTaskRemoveFromEventList+0x1b0>)
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4403      	add	r3, r0
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	e01b      	b.n	800324a <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003212:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <xTaskRemoveFromEventList+0x1b4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	61da      	str	r2, [r3, #28]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	621a      	str	r2, [r3, #32]
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	6a3a      	ldr	r2, [r7, #32]
 800322c:	3218      	adds	r2, #24
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	f103 0218 	add.w	r2, r3, #24
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	4a12      	ldr	r2, [pc, #72]	@ (8003288 <xTaskRemoveFromEventList+0x1b4>)
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003240:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <xTaskRemoveFromEventList+0x1b4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	4a10      	ldr	r2, [pc, #64]	@ (8003288 <xTaskRemoveFromEventList+0x1b4>)
 8003248:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	4b0f      	ldr	r3, [pc, #60]	@ (800328c <xTaskRemoveFromEventList+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	429a      	cmp	r2, r3
 8003256:	d905      	bls.n	8003264 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003258:	2301      	movs	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <xTaskRemoveFromEventList+0x1bc>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e001      	b.n	8003268 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8003268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	20e4      	movs	r0, #228	@ 0xe4
 800326e:	f003 fb5f 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003274:	4618      	mov	r0, r3
 8003276:	3728      	adds	r7, #40	@ 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	200001c4 	.word	0x200001c4
 8003280:	200001a4 	.word	0x200001a4
 8003284:	200000c8 	.word	0x200000c8
 8003288:	2000015c 	.word	0x2000015c
 800328c:	200000c4 	.word	0x200000c4
 8003290:	200001b0 	.word	0x200001b0

08003294 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800329c:	4b07      	ldr	r3, [pc, #28]	@ (80032bc <vTaskInternalSetTimeOutState+0x28>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <vTaskInternalSetTimeOutState+0x2c>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 80032ac:	20e7      	movs	r0, #231	@ 0xe7
 80032ae:	f003 fb03 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200001b4 	.word	0x200001b4
 80032c0:	200001a0 	.word	0x200001a0

080032c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10b      	bne.n	80032ec <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	613b      	str	r3, [r7, #16]
}
 80032e6:	bf00      	nop
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	60fb      	str	r3, [r7, #12]
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	e7fd      	b.n	8003306 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800330a:	f000 fe43 	bl	8003f94 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800330e:	4b21      	ldr	r3, [pc, #132]	@ (8003394 <xTaskCheckForTimeOut+0xd0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003326:	d102      	bne.n	800332e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	e026      	b.n	800337c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <xTaskCheckForTimeOut+0xd4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d00a      	beq.n	8003350 <xTaskCheckForTimeOut+0x8c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	429a      	cmp	r2, r3
 8003342:	d305      	bcc.n	8003350 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e015      	b.n	800337c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	429a      	cmp	r2, r3
 8003358:	d20b      	bcs.n	8003372 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	1ad2      	subs	r2, r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff94 	bl	8003294 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e004      	b.n	800337c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800337c:	f000 fe3c 	bl	8003ff8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4619      	mov	r1, r3
 8003384:	20e8      	movs	r0, #232	@ 0xe8
 8003386:	f003 fad3 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800338a:	69fb      	ldr	r3, [r7, #28]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200001a0 	.word	0x200001a0
 8003398:	200001b4 	.word	0x200001b4

0800339c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <vTaskMissedYield+0x14>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 80033a6:	20e9      	movs	r0, #233	@ 0xe9
 80033a8:	f003 fa86 	bl	80068b8 <SEGGER_SYSVIEW_RecordEndCall>
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200001b0 	.word	0x200001b0

080033b4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80033bc:	f000 f84c 	bl	8003458 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <prvIdleTask+0x20>)
 80033c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033d0:	bf00      	nop
 80033d2:	e7f3      	b.n	80033bc <prvIdleTask+0x8>
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	e00c      	b.n	80033fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <prvInitialiseTaskLists+0x60>)
 80033f0:	4413      	add	r3, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fd4a 	bl	8001e8c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d9ef      	bls.n	80033e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003404:	480d      	ldr	r0, [pc, #52]	@ (800343c <prvInitialiseTaskLists+0x64>)
 8003406:	f7fe fd41 	bl	8001e8c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800340a:	480d      	ldr	r0, [pc, #52]	@ (8003440 <prvInitialiseTaskLists+0x68>)
 800340c:	f7fe fd3e 	bl	8001e8c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003410:	480c      	ldr	r0, [pc, #48]	@ (8003444 <prvInitialiseTaskLists+0x6c>)
 8003412:	f7fe fd3b 	bl	8001e8c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003416:	480c      	ldr	r0, [pc, #48]	@ (8003448 <prvInitialiseTaskLists+0x70>)
 8003418:	f7fe fd38 	bl	8001e8c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800341c:	480b      	ldr	r0, [pc, #44]	@ (800344c <prvInitialiseTaskLists+0x74>)
 800341e:	f7fe fd35 	bl	8001e8c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003422:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <prvInitialiseTaskLists+0x78>)
 8003424:	4a05      	ldr	r2, [pc, #20]	@ (800343c <prvInitialiseTaskLists+0x64>)
 8003426:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003428:	4b0a      	ldr	r3, [pc, #40]	@ (8003454 <prvInitialiseTaskLists+0x7c>)
 800342a:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <prvInitialiseTaskLists+0x68>)
 800342c:	601a      	str	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200000c8 	.word	0x200000c8
 800343c:	2000012c 	.word	0x2000012c
 8003440:	20000140 	.word	0x20000140
 8003444:	2000015c 	.word	0x2000015c
 8003448:	20000170 	.word	0x20000170
 800344c:	20000188 	.word	0x20000188
 8003450:	20000154 	.word	0x20000154
 8003454:	20000158 	.word	0x20000158

08003458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800345e:	e019      	b.n	8003494 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003460:	f000 fd98 	bl	8003f94 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003464:	4b10      	ldr	r3, [pc, #64]	@ (80034a8 <prvCheckTasksWaitingTermination+0x50>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fd77 	bl	8001f64 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003476:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <prvCheckTasksWaitingTermination+0x54>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3b01      	subs	r3, #1
 800347c:	4a0b      	ldr	r2, [pc, #44]	@ (80034ac <prvCheckTasksWaitingTermination+0x54>)
 800347e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003480:	4b0b      	ldr	r3, [pc, #44]	@ (80034b0 <prvCheckTasksWaitingTermination+0x58>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3b01      	subs	r3, #1
 8003486:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <prvCheckTasksWaitingTermination+0x58>)
 8003488:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800348a:	f000 fdb5 	bl	8003ff8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f810 	bl	80034b4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003494:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <prvCheckTasksWaitingTermination+0x58>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e1      	bne.n	8003460 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000170 	.word	0x20000170
 80034ac:	2000019c 	.word	0x2000019c
 80034b0:	20000184 	.word	0x20000184

080034b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 ffc7 	bl	8004454 <vPortFree>
            vPortFree( pxTCB );
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 ffc4 	bl	8004454 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <prvResetNextTaskUnblockTime+0x30>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034e2:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <prvResetNextTaskUnblockTime+0x34>)
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034ea:	e005      	b.n	80034f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034ec:	4b05      	ldr	r3, [pc, #20]	@ (8003504 <prvResetNextTaskUnblockTime+0x30>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a04      	ldr	r2, [pc, #16]	@ (8003508 <prvResetNextTaskUnblockTime+0x34>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000154 	.word	0x20000154
 8003508:	200001bc 	.word	0x200001bc

0800350c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <xTaskGetSchedulerState+0x3c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800351a:	2301      	movs	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
 800351e:	e008      	b.n	8003532 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003520:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <xTaskGetSchedulerState+0x40>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003528:	2302      	movs	r3, #2
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e001      	b.n	8003532 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4619      	mov	r1, r3
 8003536:	20f5      	movs	r0, #245	@ 0xf5
 8003538:	f003 f9fa 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800353c:	687b      	ldr	r3, [r7, #4]
    }
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200001a8 	.word	0x200001a8
 800354c:	200001c4 	.word	0x200001c4

08003550 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800355a:	4b3d      	ldr	r3, [pc, #244]	@ (8003650 <prvAddCurrentTaskToDelayedList+0x100>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003560:	4b3c      	ldr	r3, [pc, #240]	@ (8003654 <prvAddCurrentTaskToDelayedList+0x104>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003566:	4b3c      	ldr	r3, [pc, #240]	@ (8003658 <prvAddCurrentTaskToDelayedList+0x108>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800356c:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3304      	adds	r3, #4
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe fcf6 	bl	8001f64 <uxListRemove>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800357e:	4b37      	ldr	r3, [pc, #220]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	2201      	movs	r2, #1
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	4b34      	ldr	r3, [pc, #208]	@ (8003660 <prvAddCurrentTaskToDelayedList+0x110>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4013      	ands	r3, r2
 8003592:	4a33      	ldr	r2, [pc, #204]	@ (8003660 <prvAddCurrentTaskToDelayedList+0x110>)
 8003594:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d124      	bne.n	80035e8 <prvAddCurrentTaskToDelayedList+0x98>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d021      	beq.n	80035e8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <prvAddCurrentTaskToDelayedList+0x114>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]
 80035aa:	4b2c      	ldr	r3, [pc, #176]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	4b27      	ldr	r3, [pc, #156]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	3204      	adds	r2, #4
 80035c6:	605a      	str	r2, [r3, #4]
 80035c8:	4b24      	ldr	r3, [pc, #144]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	4b22      	ldr	r3, [pc, #136]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a23      	ldr	r2, [pc, #140]	@ (8003664 <prvAddCurrentTaskToDelayedList+0x114>)
 80035d8:	615a      	str	r2, [r3, #20]
 80035da:	4b22      	ldr	r3, [pc, #136]	@ (8003664 <prvAddCurrentTaskToDelayedList+0x114>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a20      	ldr	r2, [pc, #128]	@ (8003664 <prvAddCurrentTaskToDelayedList+0x114>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035e6:	e02e      	b.n	8003646 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d20d      	bcs.n	800361c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003600:	4b16      	ldr	r3, [pc, #88]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2104      	movs	r1, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f003 facc 	bl	8006ba4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800360c:	4b13      	ldr	r3, [pc, #76]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	6978      	ldr	r0, [r7, #20]
 8003616:	f7fe fc6a 	bl	8001eee <vListInsert>
}
 800361a:	e014      	b.n	8003646 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800361c:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2104      	movs	r1, #4
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fabe 	bl	8006ba4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003628:	4b0c      	ldr	r3, [pc, #48]	@ (800365c <prvAddCurrentTaskToDelayedList+0x10c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3304      	adds	r3, #4
 800362e:	4619      	mov	r1, r3
 8003630:	69b8      	ldr	r0, [r7, #24]
 8003632:	f7fe fc5c 	bl	8001eee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003636:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <prvAddCurrentTaskToDelayedList+0x118>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	429a      	cmp	r2, r3
 800363e:	d202      	bcs.n	8003646 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003640:	4a09      	ldr	r2, [pc, #36]	@ (8003668 <prvAddCurrentTaskToDelayedList+0x118>)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6013      	str	r3, [r2, #0]
}
 8003646:	bf00      	nop
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200001a0 	.word	0x200001a0
 8003654:	20000154 	.word	0x20000154
 8003658:	20000158 	.word	0x20000158
 800365c:	200000c4 	.word	0x200000c4
 8003660:	200001a4 	.word	0x200001a4
 8003664:	20000188 	.word	0x20000188
 8003668:	200001bc 	.word	0x200001bc

0800366c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003672:	2300      	movs	r3, #0
 8003674:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003676:	f000 fa5b 	bl	8003b30 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800367a:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <xTimerCreateTimerTask+0x64>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00b      	beq.n	800369a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <xTimerCreateTimerTask+0x68>)
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	2302      	movs	r3, #2
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003690:	4911      	ldr	r1, [pc, #68]	@ (80036d8 <xTimerCreateTimerTask+0x6c>)
 8003692:	4812      	ldr	r0, [pc, #72]	@ (80036dc <xTimerCreateTimerTask+0x70>)
 8003694:	f7fe ffcf 	bl	8002636 <xTaskCreate>
 8003698:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	603b      	str	r3, [r7, #0]
}
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
 80036b6:	e7fd      	b.n	80036b4 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4619      	mov	r1, r3
 80036bc:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80036c0:	f003 f936 	bl	8006930 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80036c4:	687b      	ldr	r3, [r7, #4]
    }
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200001f8 	.word	0x200001f8
 80036d4:	200001fc 	.word	0x200001fc
 80036d8:	080070ac 	.word	0x080070ac
 80036dc:	08003785 	.word	0x08003785

080036e0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036ec:	e008      	b.n	8003700 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	18d1      	adds	r1, r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f8df 	bl	80038d0 <prvInsertTimerInActiveList>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <prvReloadTimer+0xe>
        }
    }
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800372e:	4b14      	ldr	r3, [pc, #80]	@ (8003780 <prvProcessExpiredTimer+0x5c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fc11 	bl	8001f64 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff ffc3 	bl	80036e0 <prvReloadTimer>
 800375a:	e008      	b.n	800376e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	4798      	blx	r3
    }
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200001f0 	.word	0x200001f0

08003784 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	4618      	mov	r0, r3
 8003792:	f000 f859 	bl	8003848 <prvGetNextExpireTime>
 8003796:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4619      	mov	r1, r3
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f805 	bl	80037ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037a2:	f000 f8d7 	bl	8003954 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037a6:	bf00      	nop
 80037a8:	e7f0      	b.n	800378c <prvTimerTask+0x8>
	...

080037ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037b6:	f7ff f977 	bl	8002aa8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f866 	bl	8003890 <prvSampleTimeNow>
 80037c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d130      	bne.n	800382e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <prvProcessTimerOrBlockTask+0x3c>
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d806      	bhi.n	80037e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80037da:	f7ff f973 	bl	8002ac4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff9f 	bl	8003724 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80037e6:	e024      	b.n	8003832 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80037ee:	4b13      	ldr	r3, [pc, #76]	@ (800383c <prvProcessTimerOrBlockTask+0x90>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <prvProcessTimerOrBlockTask+0x50>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <prvProcessTimerOrBlockTask+0x52>
 80037fc:	2300      	movs	r3, #0
 80037fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003800:	4b0f      	ldr	r3, [pc, #60]	@ (8003840 <prvProcessTimerOrBlockTask+0x94>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4619      	mov	r1, r3
 800380e:	f7fe fe9f 	bl	8002550 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003812:	f7ff f957 	bl	8002ac4 <xTaskResumeAll>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <prvProcessTimerOrBlockTask+0x98>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
    }
 800382c:	e001      	b.n	8003832 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800382e:	f7ff f949 	bl	8002ac4 <xTaskResumeAll>
    }
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200001f4 	.word	0x200001f4
 8003840:	200001f8 	.word	0x200001f8
 8003844:	e000ed04 	.word	0xe000ed04

08003848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <prvGetNextExpireTime+0x44>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <prvGetNextExpireTime+0x16>
 800385a:	2201      	movs	r2, #1
 800385c:	e000      	b.n	8003860 <prvGetNextExpireTime+0x18>
 800385e:	2200      	movs	r2, #0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800386c:	4b07      	ldr	r3, [pc, #28]	@ (800388c <prvGetNextExpireTime+0x44>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e001      	b.n	800387c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800387c:	68fb      	ldr	r3, [r7, #12]
    }
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	200001f0 	.word	0x200001f0

08003890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003898:	f7ff fa16 	bl	8002cc8 <xTaskGetTickCount>
 800389c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800389e:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <prvSampleTimeNow+0x3c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d205      	bcs.n	80038b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038a8:	f000 f91c 	bl	8003ae4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e002      	b.n	80038ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038ba:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <prvSampleTimeNow+0x3c>)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038c0:	68fb      	ldr	r3, [r7, #12]
    }
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000200 	.word	0x20000200

080038d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d812      	bhi.n	800391c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	1ad2      	subs	r2, r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	429a      	cmp	r2, r3
 8003902:	d302      	bcc.n	800390a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e01b      	b.n	8003942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <prvInsertTimerInActiveList+0x7c>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3304      	adds	r3, #4
 8003912:	4619      	mov	r1, r3
 8003914:	4610      	mov	r0, r2
 8003916:	f7fe faea 	bl	8001eee <vListInsert>
 800391a:	e012      	b.n	8003942 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d206      	bcs.n	8003932 <prvInsertTimerInActiveList+0x62>
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d302      	bcc.n	8003932 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800392c:	2301      	movs	r3, #1
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e007      	b.n	8003942 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003932:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <prvInsertTimerInActiveList+0x80>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3304      	adds	r3, #4
 800393a:	4619      	mov	r1, r3
 800393c:	4610      	mov	r0, r2
 800393e:	f7fe fad6 	bl	8001eee <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003942:	697b      	ldr	r3, [r7, #20]
    }
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200001f4 	.word	0x200001f4
 8003950:	200001f0 	.word	0x200001f0

08003954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003966:	e0a9      	b.n	8003abc <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f2c0 80a6 	blt.w	8003abc <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe faef 	bl	8001f64 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff81 	bl	8003890 <prvSampleTimeNow>
 800398e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	3b01      	subs	r3, #1
 8003994:	2b08      	cmp	r3, #8
 8003996:	f200 808e 	bhi.w	8003ab6 <prvProcessReceivedCommands+0x162>
 800399a:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <prvProcessReceivedCommands+0x4c>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	080039c5 	.word	0x080039c5
 80039a8:	08003a2d 	.word	0x08003a2d
 80039ac:	08003a41 	.word	0x08003a41
 80039b0:	08003a8d 	.word	0x08003a8d
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039c5 	.word	0x080039c5
 80039bc:	08003a2d 	.word	0x08003a2d
 80039c0:	08003a41 	.word	0x08003a41
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	18d1      	adds	r1, r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	69f8      	ldr	r0, [r7, #28]
 80039e4:	f7ff ff74 	bl	80038d0 <prvInsertTimerInActiveList>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d065      	beq.n	8003aba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	4413      	add	r3, r2
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4619      	mov	r1, r3
 8003a08:	69f8      	ldr	r0, [r7, #28]
 8003a0a:	f7ff fe69 	bl	80036e0 <prvReloadTimer>
 8003a0e:	e008      	b.n	8003a22 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	69f8      	ldr	r0, [r7, #28]
 8003a28:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003a2a:	e046      	b.n	8003aba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a32:	f023 0301 	bic.w	r3, r3, #1
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003a3e:	e03d      	b.n	8003abc <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10b      	bne.n	8003a78 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	617b      	str	r3, [r7, #20]
}
 8003a72:	bf00      	nop
 8003a74:	bf00      	nop
 8003a76:	e7fd      	b.n	8003a74 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	18d1      	adds	r1, r2, r3
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	69f8      	ldr	r0, [r7, #28]
 8003a86:	f7ff ff23 	bl	80038d0 <prvInsertTimerInActiveList>
                        break;
 8003a8a:	e017      	b.n	8003abc <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003a9a:	69f8      	ldr	r0, [r7, #28]
 8003a9c:	f000 fcda 	bl	8004454 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003aa0:	e00c      	b.n	8003abc <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003ab4:	e002      	b.n	8003abc <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <prvProcessReceivedCommands+0x168>
                        break;
 8003aba:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <prvProcessReceivedCommands+0x18c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f107 0108 	add.w	r1, r7, #8
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe fb80 	bl	80021cc <xQueueReceive>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f47f af4a 	bne.w	8003968 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200001f8 	.word	0x200001f8

08003ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aea:	e009      	b.n	8003b00 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <prvSwitchTimerLists+0x44>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003af6:	f04f 31ff 	mov.w	r1, #4294967295
 8003afa:	6838      	ldr	r0, [r7, #0]
 8003afc:	f7ff fe12 	bl	8003724 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b00:	4b09      	ldr	r3, [pc, #36]	@ (8003b28 <prvSwitchTimerLists+0x44>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f0      	bne.n	8003aec <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <prvSwitchTimerLists+0x44>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b10:	4b06      	ldr	r3, [pc, #24]	@ (8003b2c <prvSwitchTimerLists+0x48>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <prvSwitchTimerLists+0x44>)
 8003b16:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <prvSwitchTimerLists+0x48>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6013      	str	r3, [r2, #0]
    }
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200001f0 	.word	0x200001f0
 8003b2c:	200001f4 	.word	0x200001f4

08003b30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b34:	f000 fa2e 	bl	8003f94 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b38:	4b12      	ldr	r3, [pc, #72]	@ (8003b84 <prvCheckForValidListAndQueue+0x54>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11d      	bne.n	8003b7c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b40:	4811      	ldr	r0, [pc, #68]	@ (8003b88 <prvCheckForValidListAndQueue+0x58>)
 8003b42:	f7fe f9a3 	bl	8001e8c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b46:	4811      	ldr	r0, [pc, #68]	@ (8003b8c <prvCheckForValidListAndQueue+0x5c>)
 8003b48:	f7fe f9a0 	bl	8001e8c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b4c:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <prvCheckForValidListAndQueue+0x60>)
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b88 <prvCheckForValidListAndQueue+0x58>)
 8003b50:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b52:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <prvCheckForValidListAndQueue+0x64>)
 8003b54:	4a0d      	ldr	r2, [pc, #52]	@ (8003b8c <prvCheckForValidListAndQueue+0x5c>)
 8003b56:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8003b58:	2200      	movs	r2, #0
 8003b5a:	210c      	movs	r1, #12
 8003b5c:	200a      	movs	r0, #10
 8003b5e:	f7fe fab9 	bl	80020d4 <xQueueGenericCreate>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4a07      	ldr	r2, [pc, #28]	@ (8003b84 <prvCheckForValidListAndQueue+0x54>)
 8003b66:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b68:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <prvCheckForValidListAndQueue+0x54>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <prvCheckForValidListAndQueue+0x54>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4908      	ldr	r1, [pc, #32]	@ (8003b98 <prvCheckForValidListAndQueue+0x68>)
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fc9a 	bl	80024b0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b7c:	f000 fa3c 	bl	8003ff8 <vPortExitCritical>
    }
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	200001f8 	.word	0x200001f8
 8003b88:	200001c8 	.word	0x200001c8
 8003b8c:	200001dc 	.word	0x200001dc
 8003b90:	200001f0 	.word	0x200001f0
 8003b94:	200001f4 	.word	0x200001f4
 8003b98:	080070b4 	.word	0x080070b4

08003b9c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3b04      	subs	r3, #4
 8003bac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bb4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3b04      	subs	r3, #4
 8003bba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3b04      	subs	r3, #4
 8003bca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8003c00 <pxPortInitialiseStack+0x64>)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	3b14      	subs	r3, #20
 8003bd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	3b04      	subs	r3, #4
 8003be2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f06f 0202 	mvn.w	r2, #2
 8003bea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3b20      	subs	r3, #32
 8003bf0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	08003c05 	.word	0x08003c05

08003c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003c0e:	4b13      	ldr	r3, [pc, #76]	@ (8003c5c <prvTaskExitError+0x58>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d00b      	beq.n	8003c30 <prvTaskExitError+0x2c>
    __asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	60fb      	str	r3, [r7, #12]
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <prvTaskExitError+0x28>
    __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60bb      	str	r3, [r7, #8]
}
 8003c42:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003c44:	bf00      	nop
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0fc      	beq.n	8003c46 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000010 	.word	0x20000010

08003c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c60:	4b07      	ldr	r3, [pc, #28]	@ (8003c80 <pxCurrentTCBConst2>)
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	6808      	ldr	r0, [r1, #0]
 8003c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6a:	f380 8809 	msr	PSP, r0
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f380 8811 	msr	BASEPRI, r0
 8003c7a:	4770      	bx	lr
 8003c7c:	f3af 8000 	nop.w

08003c80 <pxCurrentTCBConst2>:
 8003c80:	200000c4 	.word	0x200000c4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop

08003c88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c88:	4808      	ldr	r0, [pc, #32]	@ (8003cac <prvPortStartFirstTask+0x24>)
 8003c8a:	6800      	ldr	r0, [r0, #0]
 8003c8c:	6800      	ldr	r0, [r0, #0]
 8003c8e:	f380 8808 	msr	MSP, r0
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f380 8814 	msr	CONTROL, r0
 8003c9a:	b662      	cpsie	i
 8003c9c:	b661      	cpsie	f
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	df00      	svc	0
 8003ca8:	bf00      	nop
 8003caa:	0000      	.short	0x0000
 8003cac:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop

08003cb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	@ 0x30
 8003cb8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003cba:	4b69      	ldr	r3, [pc, #420]	@ (8003e60 <xPortStartScheduler+0x1ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a69      	ldr	r2, [pc, #420]	@ (8003e64 <xPortStartScheduler+0x1b0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d10b      	bne.n	8003cdc <xPortStartScheduler+0x28>
    __asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	e7fd      	b.n	8003cd8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003cdc:	4b60      	ldr	r3, [pc, #384]	@ (8003e60 <xPortStartScheduler+0x1ac>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a61      	ldr	r2, [pc, #388]	@ (8003e68 <xPortStartScheduler+0x1b4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d10b      	bne.n	8003cfe <xPortStartScheduler+0x4a>
    __asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	623b      	str	r3, [r7, #32]
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	e7fd      	b.n	8003cfa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8003e6c <xPortStartScheduler+0x1b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	332c      	adds	r3, #44	@ 0x2c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a59      	ldr	r2, [pc, #356]	@ (8003e70 <xPortStartScheduler+0x1bc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00b      	beq.n	8003d28 <xPortStartScheduler+0x74>
    __asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	61fb      	str	r3, [r7, #28]
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2a:	3338      	adds	r3, #56	@ 0x38
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a51      	ldr	r2, [pc, #324]	@ (8003e74 <xPortStartScheduler+0x1c0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00b      	beq.n	8003d4c <xPortStartScheduler+0x98>
    __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	61bb      	str	r3, [r7, #24]
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	e7fd      	b.n	8003d48 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d50:	4b49      	ldr	r3, [pc, #292]	@ (8003e78 <xPortStartScheduler+0x1c4>)
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	22ff      	movs	r2, #255	@ 0xff
 8003d60:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <xPortStartScheduler+0x1c8>)
 8003d76:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003d78:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <xPortStartScheduler+0x1c8>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <xPortStartScheduler+0xe4>
    __asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	617b      	str	r3, [r7, #20]
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d013      	beq.n	8003dce <xPortStartScheduler+0x11a>
    __asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	613b      	str	r3, [r7, #16]
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	e7fd      	b.n	8003dba <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b80      	cmp	r3, #128	@ 0x80
 8003dd8:	d0f1      	beq.n	8003dbe <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d103      	bne.n	8003de8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003de0:	4b27      	ldr	r3, [pc, #156]	@ (8003e80 <xPortStartScheduler+0x1cc>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e004      	b.n	8003df2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f1c3 0307 	rsb	r3, r3, #7
 8003dee:	4a24      	ldr	r2, [pc, #144]	@ (8003e80 <xPortStartScheduler+0x1cc>)
 8003df0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003df2:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <xPortStartScheduler+0x1cc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	4a21      	ldr	r2, [pc, #132]	@ (8003e80 <xPortStartScheduler+0x1cc>)
 8003dfa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dfc:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <xPortStartScheduler+0x1cc>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e04:	4a1e      	ldr	r2, [pc, #120]	@ (8003e80 <xPortStartScheduler+0x1cc>)
 8003e06:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e10:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <xPortStartScheduler+0x1d0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1b      	ldr	r2, [pc, #108]	@ (8003e84 <xPortStartScheduler+0x1d0>)
 8003e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e1c:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <xPortStartScheduler+0x1d0>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a18      	ldr	r2, [pc, #96]	@ (8003e84 <xPortStartScheduler+0x1d0>)
 8003e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e26:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003e28:	4b17      	ldr	r3, [pc, #92]	@ (8003e88 <xPortStartScheduler+0x1d4>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e2e:	f000 f96d 	bl	800410c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e32:	4b16      	ldr	r3, [pc, #88]	@ (8003e8c <xPortStartScheduler+0x1d8>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e38:	f000 f98c 	bl	8004154 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <xPortStartScheduler+0x1dc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a13      	ldr	r2, [pc, #76]	@ (8003e90 <xPortStartScheduler+0x1dc>)
 8003e42:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e46:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e48:	f7ff ff1e 	bl	8003c88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e4c:	f7ff f864 	bl	8002f18 <vTaskSwitchContext>
    prvTaskExitError();
 8003e50:	f7ff fed8 	bl	8003c04 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3730      	adds	r7, #48	@ 0x30
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000ed00 	.word	0xe000ed00
 8003e64:	410fc271 	.word	0x410fc271
 8003e68:	410fc270 	.word	0x410fc270
 8003e6c:	e000ed08 	.word	0xe000ed08
 8003e70:	08003c61 	.word	0x08003c61
 8003e74:	08004051 	.word	0x08004051
 8003e78:	e000e400 	.word	0xe000e400
 8003e7c:	20000204 	.word	0x20000204
 8003e80:	20000208 	.word	0x20000208
 8003e84:	e000ed20 	.word	0xe000ed20
 8003e88:	e000ed1c 	.word	0xe000ed1c
 8003e8c:	20000010 	.word	0x20000010
 8003e90:	e000ef34 	.word	0xe000ef34

08003e94 <vInitPrioGroupValue>:
Calcule et ajuste la valeur maximale pour le Priority Grouping.
Vérifie la cohérence avec CMSIS et FreeRTOS.
Restaure les valeurs initiales des registres modifiés.*/

void vInitPrioGroupValue(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e9a:	4b38      	ldr	r3, [pc, #224]	@ (8003f7c <vInitPrioGroupValue+0xe8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	@ (8003f80 <vInitPrioGroupValue+0xec>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10b      	bne.n	8003ebc <vInitPrioGroupValue+0x28>
    __asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	613b      	str	r3, [r7, #16]
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8003f7c <vInitPrioGroupValue+0xe8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a30      	ldr	r2, [pc, #192]	@ (8003f84 <vInitPrioGroupValue+0xf0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d10b      	bne.n	8003ede <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60fb      	str	r3, [r7, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ede:	4b2a      	ldr	r3, [pc, #168]	@ (8003f88 <vInitPrioGroupValue+0xf4>)
 8003ee0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	22ff      	movs	r2, #255	@ 0xff
 8003eee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <vInitPrioGroupValue+0xf8>)
 8003f04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f06:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f0c:	e009      	b.n	8003f22 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2a:	2b80      	cmp	r3, #128	@ 0x80
 8003f2c:	d0ef      	beq.n	8003f0e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f2e:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1c3 0307 	rsb	r3, r3, #7
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d00b      	beq.n	8003f52 <vInitPrioGroupValue+0xbe>
    __asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60bb      	str	r3, [r7, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	e7fd      	b.n	8003f4e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f52:	4b0f      	ldr	r3, [pc, #60]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f5a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f64:	4a0a      	ldr	r2, [pc, #40]	@ (8003f90 <vInitPrioGroupValue+0xfc>)
 8003f66:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003f70:	bf00      	nop
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	e000ed00 	.word	0xe000ed00
 8003f80:	410fc271 	.word	0x410fc271
 8003f84:	410fc270 	.word	0x410fc270
 8003f88:	e000e400 	.word	0xe000e400
 8003f8c:	20000204 	.word	0x20000204
 8003f90:	20000208 	.word	0x20000208

08003f94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
    __asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	607b      	str	r3, [r7, #4]
}
 8003fac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003fae:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <vPortEnterCritical+0x5c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff0 <vPortEnterCritical+0x5c>)
 8003fb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <vPortEnterCritical+0x5c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d110      	bne.n	8003fe2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <vPortEnterCritical+0x60>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00b      	beq.n	8003fe2 <vPortEnterCritical+0x4e>
    __asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	603b      	str	r3, [r7, #0]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <vPortEnterCritical+0x4a>
    }
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000010 	.word	0x20000010
 8003ff4:	e000ed04 	.word	0xe000ed04

08003ff8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003ffe:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <vPortExitCritical+0x50>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <vPortExitCritical+0x26>
    __asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	607b      	str	r3, [r7, #4]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800401e:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <vPortExitCritical+0x50>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3b01      	subs	r3, #1
 8004024:	4a08      	ldr	r2, [pc, #32]	@ (8004048 <vPortExitCritical+0x50>)
 8004026:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004028:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <vPortExitCritical+0x50>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <vPortExitCritical+0x44>
 8004030:	2300      	movs	r3, #0
 8004032:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800403a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000010 	.word	0x20000010
 800404c:	00000000 	.word	0x00000000

08004050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004050:	f3ef 8009 	mrs	r0, PSP
 8004054:	f3bf 8f6f 	isb	sy
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <pxCurrentTCBConst>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f01e 0f10 	tst.w	lr, #16
 8004060:	bf08      	it	eq
 8004062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406a:	6010      	str	r0, [r2, #0]
 800406c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004074:	f380 8811 	msr	BASEPRI, r0
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f7fe ff4a 	bl	8002f18 <vTaskSwitchContext>
 8004084:	f04f 0000 	mov.w	r0, #0
 8004088:	f380 8811 	msr	BASEPRI, r0
 800408c:	bc09      	pop	{r0, r3}
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	6808      	ldr	r0, [r1, #0]
 8004092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004096:	f01e 0f10 	tst.w	lr, #16
 800409a:	bf08      	it	eq
 800409c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80040a0:	f380 8809 	msr	PSP, r0
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst>:
 80040b0:	200000c4 	.word	0x200000c4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <SysTick_Handler>:

/*xPortSysTickHandler() met à jour le compteur de ticks.
Si nécessaire, il déclenche une interruption PendSV pour changer de tâche.*/

void xPortSysTickHandler( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
    __asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	607b      	str	r3, [r7, #4]
}
 80040d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80040d2:	f002 fb77 	bl	80067c4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80040d6:	f7fe fe1f 	bl	8002d18 <xTaskIncrementTick>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80040e0:	f002 fbce 	bl	8006880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040e4:	4b08      	ldr	r3, [pc, #32]	@ (8004108 <SysTick_Handler+0x50>)
 80040e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e001      	b.n	80040f2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80040ee:	f002 fbab 	bl	8006848 <SEGGER_SYSVIEW_RecordExitISR>
 80040f2:	2300      	movs	r3, #0
 80040f4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f383 8811 	msr	BASEPRI, r3
}
 80040fc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004110:	4b0b      	ldr	r3, [pc, #44]	@ (8004140 <vPortSetupTimerInterrupt+0x34>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004116:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <vPortSetupTimerInterrupt+0x38>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <vPortSetupTimerInterrupt+0x3c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0a      	ldr	r2, [pc, #40]	@ (800414c <vPortSetupTimerInterrupt+0x40>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <vPortSetupTimerInterrupt+0x44>)
 800412a:	3b01      	subs	r3, #1
 800412c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800412e:	4b04      	ldr	r3, [pc, #16]	@ (8004140 <vPortSetupTimerInterrupt+0x34>)
 8004130:	2207      	movs	r2, #7
 8004132:	601a      	str	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000e010 	.word	0xe000e010
 8004144:	e000e018 	.word	0xe000e018
 8004148:	20000000 	.word	0x20000000
 800414c:	10624dd3 	.word	0x10624dd3
 8004150:	e000e014 	.word	0xe000e014

08004154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004154:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004164 <vPortEnableVFP+0x10>
 8004158:	6801      	ldr	r1, [r0, #0]
 800415a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800415e:	6001      	str	r1, [r0, #0]
 8004160:	4770      	bx	lr
 8004162:	0000      	.short	0x0000
 8004164:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop

0800416c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004172:	f3ef 8305 	mrs	r3, IPSR
 8004176:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	d915      	bls.n	80041aa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800417e:	4a18      	ldr	r2, [pc, #96]	@ (80041e0 <vPortValidateInterruptPriority+0x74>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004188:	4b16      	ldr	r3, [pc, #88]	@ (80041e4 <vPortValidateInterruptPriority+0x78>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	7afa      	ldrb	r2, [r7, #11]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20b      	bcs.n	80041aa <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	607b      	str	r3, [r7, #4]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80041aa:	4b0f      	ldr	r3, [pc, #60]	@ (80041e8 <vPortValidateInterruptPriority+0x7c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041b2:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <vPortValidateInterruptPriority+0x80>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d90b      	bls.n	80041d2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	603b      	str	r3, [r7, #0]
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <vPortValidateInterruptPriority+0x62>
    }
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	e000e3f0 	.word	0xe000e3f0
 80041e4:	20000204 	.word	0x20000204
 80041e8:	e000ed0c 	.word	0xe000ed0c
 80041ec:	20000208 	.word	0x20000208

080041f0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	@ 0x38
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d022      	beq.n	8004248 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004202:	2308      	movs	r3, #8
 8004204:	43db      	mvns	r3, r3
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	d81b      	bhi.n	8004244 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800420c:	2208      	movs	r2, #8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	2b00      	cmp	r3, #0
 800421c:	d014      	beq.n	8004248 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	f1c3 0308 	rsb	r3, r3, #8
 8004228:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800422a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422c:	43db      	mvns	r3, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	d804      	bhi.n	800423e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	4413      	add	r3, r2
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e004      	b.n	8004248 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	e001      	b.n	8004248 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004248:	f7fe fc2e 	bl	8002aa8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800424c:	4b7a      	ldr	r3, [pc, #488]	@ (8004438 <pvPortMalloc+0x248>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004254:	f000 f978 	bl	8004548 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f2c0 80d3 	blt.w	8004406 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80cf 	beq.w	8004406 <pvPortMalloc+0x216>
 8004268:	4b74      	ldr	r3, [pc, #464]	@ (800443c <pvPortMalloc+0x24c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	f200 80c9 	bhi.w	8004406 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004274:	4b72      	ldr	r3, [pc, #456]	@ (8004440 <pvPortMalloc+0x250>)
 8004276:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004278:	4b71      	ldr	r3, [pc, #452]	@ (8004440 <pvPortMalloc+0x250>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	4a70      	ldr	r2, [pc, #448]	@ (8004444 <pvPortMalloc+0x254>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d305      	bcc.n	8004292 <pvPortMalloc+0xa2>
 8004286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004288:	4a6f      	ldr	r2, [pc, #444]	@ (8004448 <pvPortMalloc+0x258>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d801      	bhi.n	8004292 <pvPortMalloc+0xa2>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <pvPortMalloc+0xa4>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d129      	bne.n	80042ec <pvPortMalloc+0xfc>
    __asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	623b      	str	r3, [r7, #32]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80042b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80042ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042bc:	4a61      	ldr	r2, [pc, #388]	@ (8004444 <pvPortMalloc+0x254>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d305      	bcc.n	80042ce <pvPortMalloc+0xde>
 80042c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c4:	4a60      	ldr	r2, [pc, #384]	@ (8004448 <pvPortMalloc+0x258>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d801      	bhi.n	80042ce <pvPortMalloc+0xde>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <pvPortMalloc+0xe0>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <pvPortMalloc+0xfc>
    __asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	61fb      	str	r3, [r7, #28]
}
 80042e6:	bf00      	nop
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80042ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d903      	bls.n	80042fe <pvPortMalloc+0x10e>
 80042f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1d8      	bne.n	80042b0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80042fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004438 <pvPortMalloc+0x248>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004304:	429a      	cmp	r2, r3
 8004306:	d07e      	beq.n	8004406 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	4413      	add	r3, r2
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	4a4b      	ldr	r2, [pc, #300]	@ (8004444 <pvPortMalloc+0x254>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d305      	bcc.n	8004326 <pvPortMalloc+0x136>
 800431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431c:	4a4a      	ldr	r2, [pc, #296]	@ (8004448 <pvPortMalloc+0x258>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d801      	bhi.n	8004326 <pvPortMalloc+0x136>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <pvPortMalloc+0x138>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <pvPortMalloc+0x154>
    __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	61bb      	str	r3, [r7, #24]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800434c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d90b      	bls.n	800436e <pvPortMalloc+0x17e>
    __asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	617b      	str	r3, [r7, #20]
}
 8004368:	bf00      	nop
 800436a:	bf00      	nop
 800436c:	e7fd      	b.n	800436a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800436e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1ad2      	subs	r2, r2, r3
 8004376:	2308      	movs	r3, #8
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	429a      	cmp	r2, r3
 800437c:	d924      	bls.n	80043c8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800437e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00b      	beq.n	80043a8 <pvPortMalloc+0x1b8>
    __asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad2      	subs	r2, r2, r3
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80043c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043c6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <pvPortMalloc+0x24c>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	4a1a      	ldr	r2, [pc, #104]	@ (800443c <pvPortMalloc+0x24c>)
 80043d4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <pvPortMalloc+0x24c>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b1c      	ldr	r3, [pc, #112]	@ (800444c <pvPortMalloc+0x25c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d203      	bcs.n	80043ea <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043e2:	4b16      	ldr	r3, [pc, #88]	@ (800443c <pvPortMalloc+0x24c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <pvPortMalloc+0x25c>)
 80043e8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80043ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043fc:	4b14      	ldr	r3, [pc, #80]	@ (8004450 <pvPortMalloc+0x260>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	4a13      	ldr	r2, [pc, #76]	@ (8004450 <pvPortMalloc+0x260>)
 8004404:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004406:	f7fe fb5d 	bl	8002ac4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <pvPortMalloc+0x23c>
    __asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
}
 8004426:	bf00      	nop
 8004428:	bf00      	nop
 800442a:	e7fd      	b.n	8004428 <pvPortMalloc+0x238>
    return pvReturn;
 800442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800442e:	4618      	mov	r0, r3
 8004430:	3738      	adds	r7, #56	@ 0x38
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20012e14 	.word	0x20012e14
 800443c:	20012e18 	.word	0x20012e18
 8004440:	20012e0c 	.word	0x20012e0c
 8004444:	2000020c 	.word	0x2000020c
 8004448:	20012e0b 	.word	0x20012e0b
 800444c:	20012e1c 	.word	0x20012e1c
 8004450:	20012e20 	.word	0x20012e20

08004454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d064      	beq.n	8004530 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004466:	2308      	movs	r3, #8
 8004468:	425b      	negs	r3, r3
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	4a30      	ldr	r2, [pc, #192]	@ (8004538 <vPortFree+0xe4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d305      	bcc.n	8004488 <vPortFree+0x34>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	4a2f      	ldr	r2, [pc, #188]	@ (800453c <vPortFree+0xe8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d801      	bhi.n	8004488 <vPortFree+0x34>
 8004484:	2301      	movs	r3, #1
 8004486:	e000      	b.n	800448a <vPortFree+0x36>
 8004488:	2300      	movs	r3, #0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <vPortFree+0x52>
    __asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	617b      	str	r3, [r7, #20]
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	e7fd      	b.n	80044a2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	db0b      	blt.n	80044c6 <vPortFree+0x72>
    __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	613b      	str	r3, [r7, #16]
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	e7fd      	b.n	80044c2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00b      	beq.n	80044e6 <vPortFree+0x92>
    __asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60fb      	str	r3, [r7, #12]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	0fdb      	lsrs	r3, r3, #31
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01c      	beq.n	8004530 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d118      	bne.n	8004530 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800450a:	f7fe facd 	bl	8002aa8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <vPortFree+0xec>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4413      	add	r3, r2
 8004518:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <vPortFree+0xec>)
 800451a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800451c:	69b8      	ldr	r0, [r7, #24]
 800451e:	f000 f86d 	bl	80045fc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004522:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <vPortFree+0xf0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3301      	adds	r3, #1
 8004528:	4a06      	ldr	r2, [pc, #24]	@ (8004544 <vPortFree+0xf0>)
 800452a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800452c:	f7fe faca 	bl	8002ac4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004530:	bf00      	nop
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	2000020c 	.word	0x2000020c
 800453c:	20012e0b 	.word	0x20012e0b
 8004540:	20012e18 	.word	0x20012e18
 8004544:	20012e24 	.word	0x20012e24

08004548 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800454e:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004552:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004554:	4b24      	ldr	r3, [pc, #144]	@ (80045e8 <prvHeapInit+0xa0>)
 8004556:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3307      	adds	r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	4a1c      	ldr	r2, [pc, #112]	@ (80045e8 <prvHeapInit+0xa0>)
 8004578:	4413      	add	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4a1b      	ldr	r2, [pc, #108]	@ (80045ec <prvHeapInit+0xa4>)
 8004580:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004582:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <prvHeapInit+0xa4>)
 8004584:	2200      	movs	r2, #0
 8004586:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4413      	add	r3, r2
 800458e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004590:	2208      	movs	r2, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a13      	ldr	r2, [pc, #76]	@ (80045f0 <prvHeapInit+0xa8>)
 80045a4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045a6:	4b12      	ldr	r3, [pc, #72]	@ (80045f0 <prvHeapInit+0xa8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80045ae:	4b10      	ldr	r3, [pc, #64]	@ (80045f0 <prvHeapInit+0xa8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	1ad2      	subs	r2, r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80045c4:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <prvHeapInit+0xa8>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4a08      	ldr	r2, [pc, #32]	@ (80045f4 <prvHeapInit+0xac>)
 80045d2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a07      	ldr	r2, [pc, #28]	@ (80045f8 <prvHeapInit+0xb0>)
 80045da:	6013      	str	r3, [r2, #0]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	2000020c 	.word	0x2000020c
 80045ec:	20012e0c 	.word	0x20012e0c
 80045f0:	20012e14 	.word	0x20012e14
 80045f4:	20012e1c 	.word	0x20012e1c
 80045f8:	20012e18 	.word	0x20012e18

080045fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <prvInsertBlockIntoFreeList+0xe4>)
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e002      	b.n	8004610 <prvInsertBlockIntoFreeList+0x14>
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d8f7      	bhi.n	800460a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4a30      	ldr	r2, [pc, #192]	@ (80046e0 <prvInsertBlockIntoFreeList+0xe4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d018      	beq.n	8004654 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4a2f      	ldr	r2, [pc, #188]	@ (80046e4 <prvInsertBlockIntoFreeList+0xe8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d305      	bcc.n	8004636 <prvInsertBlockIntoFreeList+0x3a>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4a2e      	ldr	r2, [pc, #184]	@ (80046e8 <prvInsertBlockIntoFreeList+0xec>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d801      	bhi.n	8004636 <prvInsertBlockIntoFreeList+0x3a>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <prvInsertBlockIntoFreeList+0x3c>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4413      	add	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d108      	bne.n	8004678 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	441a      	add	r2, r3
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	441a      	add	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d118      	bne.n	80046be <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b16      	ldr	r3, [pc, #88]	@ (80046ec <prvInsertBlockIntoFreeList+0xf0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d00d      	beq.n	80046b4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	441a      	add	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e008      	b.n	80046c6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80046b4:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <prvInsertBlockIntoFreeList+0xf0>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e003      	b.n	80046c6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d002      	beq.n	80046d4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20012e0c 	.word	0x20012e0c
 80046e4:	2000020c 	.word	0x2000020c
 80046e8:	20012e0b 	.word	0x20012e0b
 80046ec:	20012e14 	.word	0x20012e14

080046f0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046f4:	4803      	ldr	r0, [pc, #12]	@ (8004704 <_cbSendSystemDesc+0x14>)
 80046f6:	f002 f80f 	bl	8006718 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046fa:	4803      	ldr	r0, [pc, #12]	@ (8004708 <_cbSendSystemDesc+0x18>)
 80046fc:	f002 f80c 	bl	8006718 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004700:	bf00      	nop
 8004702:	bd80      	pop	{r7, pc}
 8004704:	080070bc 	.word	0x080070bc
 8004708:	080070f8 	.word	0x080070f8

0800470c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <SEGGER_SYSVIEW_Conf+0x20>)
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	4b05      	ldr	r3, [pc, #20]	@ (800472c <SEGGER_SYSVIEW_Conf+0x20>)
 8004716:	6819      	ldr	r1, [r3, #0]
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <SEGGER_SYSVIEW_Conf+0x24>)
 800471a:	4a06      	ldr	r2, [pc, #24]	@ (8004734 <SEGGER_SYSVIEW_Conf+0x28>)
 800471c:	f001 fc80 	bl	8006020 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004720:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004724:	f001 fcc0 	bl	80060a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004728:	bf00      	nop
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000000 	.word	0x20000000
 8004730:	080046f1 	.word	0x080046f1
 8004734:	08007194 	.word	0x08007194

08004738 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473a:	b085      	sub	sp, #20
 800473c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	e033      	b.n	80047ac <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004744:	491e      	ldr	r1, [pc, #120]	@ (80047c0 <_cbSendTaskList+0x88>)
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	491a      	ldr	r1, [pc, #104]	@ (80047c0 <_cbSendTaskList+0x88>)
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3304      	adds	r3, #4
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	4c16      	ldr	r4, [pc, #88]	@ (80047c0 <_cbSendTaskList+0x88>)
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4423      	add	r3, r4
 8004774:	3308      	adds	r3, #8
 8004776:	681c      	ldr	r4, [r3, #0]
 8004778:	4d11      	ldr	r5, [pc, #68]	@ (80047c0 <_cbSendTaskList+0x88>)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	442b      	add	r3, r5
 8004786:	330c      	adds	r3, #12
 8004788:	681d      	ldr	r5, [r3, #0]
 800478a:	4e0d      	ldr	r6, [pc, #52]	@ (80047c0 <_cbSendTaskList+0x88>)
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4433      	add	r3, r6
 8004798:	3310      	adds	r3, #16
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	462b      	mov	r3, r5
 80047a0:	4622      	mov	r2, r4
 80047a2:	f000 f8bd 	bl	8004920 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3301      	adds	r3, #1
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <_cbSendTaskList+0x8c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d3c6      	bcc.n	8004744 <_cbSendTaskList+0xc>
  }
}
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047c0:	20012e28 	.word	0x20012e28
 80047c4:	20012ec8 	.word	0x20012ec8

080047c8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80047d0:	f7fe fa8c 	bl	8002cec <xTaskGetTickCountFromISR>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2200      	movs	r2, #0
 80047d8:	469a      	mov	sl, r3
 80047da:	4693      	mov	fp, r2
 80047dc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	f04f 0a00 	mov.w	sl, #0
 80047ec:	f04f 0b00 	mov.w	fp, #0
 80047f0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047f4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047f8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047fc:	4652      	mov	r2, sl
 80047fe:	465b      	mov	r3, fp
 8004800:	1a14      	subs	r4, r2, r0
 8004802:	eb63 0501 	sbc.w	r5, r3, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	00ab      	lsls	r3, r5, #2
 8004810:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004814:	00a2      	lsls	r2, r4, #2
 8004816:	4614      	mov	r4, r2
 8004818:	461d      	mov	r5, r3
 800481a:	eb14 0800 	adds.w	r8, r4, r0
 800481e:	eb45 0901 	adc.w	r9, r5, r1
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004836:	4690      	mov	r8, r2
 8004838:	4699      	mov	r9, r3
 800483a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800483e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004842:	4610      	mov	r0, r2
 8004844:	4619      	mov	r1, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004850 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800485e:	2205      	movs	r2, #5
 8004860:	492b      	ldr	r1, [pc, #172]	@ (8004910 <SYSVIEW_AddTask+0xc0>)
 8004862:	68b8      	ldr	r0, [r7, #8]
 8004864:	f002 fb92 	bl	8006f8c <memcmp>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d04b      	beq.n	8004906 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800486e:	4b29      	ldr	r3, [pc, #164]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b07      	cmp	r3, #7
 8004874:	d903      	bls.n	800487e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004876:	4828      	ldr	r0, [pc, #160]	@ (8004918 <SYSVIEW_AddTask+0xc8>)
 8004878:	f002 fafe 	bl	8006e78 <SEGGER_SYSVIEW_Warn>
    return;
 800487c:	e044      	b.n	8004908 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800487e:	4b25      	ldr	r3, [pc, #148]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4926      	ldr	r1, [pc, #152]	@ (800491c <SYSVIEW_AddTask+0xcc>)
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004892:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4921      	ldr	r1, [pc, #132]	@ (800491c <SYSVIEW_AddTask+0xcc>)
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	3304      	adds	r3, #4
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80048a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	491b      	ldr	r1, [pc, #108]	@ (800491c <SYSVIEW_AddTask+0xcc>)
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	3308      	adds	r3, #8
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80048be:	4b15      	ldr	r3, [pc, #84]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4916      	ldr	r1, [pc, #88]	@ (800491c <SYSVIEW_AddTask+0xcc>)
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	330c      	adds	r3, #12
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80048d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4910      	ldr	r1, [pc, #64]	@ (800491c <SYSVIEW_AddTask+0xcc>)
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3310      	adds	r3, #16
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	4a08      	ldr	r2, [pc, #32]	@ (8004914 <SYSVIEW_AddTask+0xc4>)
 80048f2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f80e 	bl	8004920 <SYSVIEW_SendTaskInfo>
 8004904:	e000      	b.n	8004908 <SYSVIEW_AddTask+0xb8>
    return;
 8004906:	bf00      	nop

}
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	08007108 	.word	0x08007108
 8004914:	20012ec8 	.word	0x20012ec8
 8004918:	08007110 	.word	0x08007110
 800491c:	20012e28 	.word	0x20012e28

08004920 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	@ 0x28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800492e:	f107 0310 	add.w	r3, r7, #16
 8004932:	2218      	movs	r2, #24
 8004934:	2100      	movs	r1, #0
 8004936:	4618      	mov	r0, r3
 8004938:	f002 fb38 	bl	8006fac <memset>
  TaskInfo.TaskID     = TaskID;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fde7 	bl	8006528 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800495a:	bf00      	nop
 800495c:	3728      	adds	r7, #40	@ 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <__NVIC_EnableIRQ>:
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	db0b      	blt.n	800498e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	f003 021f 	and.w	r2, r3, #31
 800497c:	4907      	ldr	r1, [pc, #28]	@ (800499c <__NVIC_EnableIRQ+0x38>)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	2001      	movs	r0, #1
 8004986:	fa00 f202 	lsl.w	r2, r0, r2
 800498a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	e000e100 	.word	0xe000e100

080049a0 <__NVIC_SetPriority>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	db0a      	blt.n	80049ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	490c      	ldr	r1, [pc, #48]	@ (80049ec <__NVIC_SetPriority+0x4c>)
 80049ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049be:	0112      	lsls	r2, r2, #4
 80049c0:	b2d2      	uxtb	r2, r2
 80049c2:	440b      	add	r3, r1
 80049c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049c8:	e00a      	b.n	80049e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4908      	ldr	r1, [pc, #32]	@ (80049f0 <__NVIC_SetPriority+0x50>)
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	3b04      	subs	r3, #4
 80049d8:	0112      	lsls	r2, r2, #4
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	440b      	add	r3, r1
 80049de:	761a      	strb	r2, [r3, #24]
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	e000e100 	.word	0xe000e100
 80049f0:	e000ed00 	.word	0xe000ed00

080049f4 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80049fa:	f002 fa99 	bl	8006f30 <SEGGER_SYSVIEW_IsStarted>
 80049fe:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004a06:	f001 fc13 	bl	8006230 <SEGGER_SYSVIEW_Start>
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <_cbOnUARTRx+0x3c>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d806      	bhi.n	8004a34 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <_cbOnUARTRx+0x3c>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <_cbOnUARTRx+0x3c>)
 8004a30:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004a32:	e009      	b.n	8004a48 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004a34:	f7ff ffde 	bl	80049f4 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <_cbOnUARTRx+0x3c>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	2201      	movs	r2, #1
 8004a42:	4619      	mov	r1, r3
 8004a44:	f000 fb9c 	bl	8005180 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a48:	bf00      	nop
}
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000014 	.word	0x20000014

08004a54 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a5c:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <_cbOnUARTTx+0x5c>)
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d80f      	bhi.n	8004a84 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a64:	4b12      	ldr	r3, [pc, #72]	@ (8004ab0 <_cbOnUARTTx+0x5c>)
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <_cbOnUARTTx+0x60>)
 8004a6c:	5c9a      	ldrb	r2, [r3, r2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004a72:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab0 <_cbOnUARTTx+0x5c>)
 8004a74:	785b      	ldrb	r3, [r3, #1]
 8004a76:	3301      	adds	r3, #1
 8004a78:	b2da      	uxtb	r2, r3
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <_cbOnUARTTx+0x5c>)
 8004a7c:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004a82:	e00f      	b.n	8004aa4 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004a84:	4b0a      	ldr	r3, [pc, #40]	@ (8004ab0 <_cbOnUARTTx+0x5c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa1b 	bl	8004ec8 <SEGGER_RTT_ReadUpBufferNoLock>
 8004a92:	4603      	mov	r3, r0
 8004a94:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da02      	bge.n	8004aa2 <_cbOnUARTTx+0x4e>
    r = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e000      	b.n	8004aa4 <_cbOnUARTTx+0x50>
  }
Done:
 8004aa2:	bf00      	nop
  return r;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000014 	.word	0x20000014
 8004ab4:	0800719c 	.word	0x0800719c

08004ab8 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ac0:	4a04      	ldr	r2, [pc, #16]	@ (8004ad4 <SEGGER_UART_init+0x1c>)
 8004ac2:	4905      	ldr	r1, [pc, #20]	@ (8004ad8 <SEGGER_UART_init+0x20>)
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f863 	bl	8004b90 <HIF_UART_Init>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	08004a15 	.word	0x08004a15
 8004ad8:	08004a55 	.word	0x08004a55

08004adc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b5c <USART2_IRQHandler+0x80>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 0320 	and.w	r3, r3, #32
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d011      	beq.n	8004b16 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004af2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <USART2_IRQHandler+0x84>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 030b 	and.w	r3, r3, #11
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d108      	bne.n	8004b16 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004b04:	4b17      	ldr	r3, [pc, #92]	@ (8004b64 <USART2_IRQHandler+0x88>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004b0c:	4b15      	ldr	r3, [pc, #84]	@ (8004b64 <USART2_IRQHandler+0x88>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	4610      	mov	r0, r2
 8004b14:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01a      	beq.n	8004b56 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004b20:	4b11      	ldr	r3, [pc, #68]	@ (8004b68 <USART2_IRQHandler+0x8c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d015      	beq.n	8004b54 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004b28:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <USART2_IRQHandler+0x8c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	1dfa      	adds	r2, r7, #7
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4798      	blx	r3
 8004b32:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b6c <USART2_IRQHandler+0x90>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004b6c <USART2_IRQHandler+0x90>)
 8004b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e006      	b.n	8004b56 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b48:	4b04      	ldr	r3, [pc, #16]	@ (8004b5c <USART2_IRQHandler+0x80>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b4c:	79fa      	ldrb	r2, [r7, #7]
 8004b4e:	4b04      	ldr	r3, [pc, #16]	@ (8004b60 <USART2_IRQHandler+0x84>)
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e000      	b.n	8004b56 <USART2_IRQHandler+0x7a>
      return;
 8004b54:	bf00      	nop
    }
  }
}
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	40004400 	.word	0x40004400
 8004b60:	40004404 	.word	0x40004404
 8004b64:	20012ecc 	.word	0x20012ecc
 8004b68:	20012ed0 	.word	0x20012ed0
 8004b6c:	4000440c 	.word	0x4000440c

08004b70 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a04      	ldr	r2, [pc, #16]	@ (8004b8c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	4000440c 	.word	0x4000440c

08004b90 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8004c58 <HIF_UART_Init+0xc8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c58 <HIF_UART_Init+0xc8>)
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba6:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8004c5c <HIF_UART_Init+0xcc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	@ (8004c5c <HIF_UART_Init+0xcc>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c60 <HIF_UART_Init+0xd0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bc0:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004bc8:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004bca:	4a25      	ldr	r2, [pc, #148]	@ (8004c60 <HIF_UART_Init+0xd0>)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004bd0:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HIF_UART_Init+0xd4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bdc:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004be4:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004be6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c64 <HIF_UART_Init+0xd4>)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004bec:	4b1e      	ldr	r3, [pc, #120]	@ (8004c68 <HIF_UART_Init+0xd8>)
 8004bee:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8004bf2:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c6c <HIF_UART_Init+0xdc>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <HIF_UART_Init+0xe0>)
 8004bfc:	2280      	movs	r2, #128	@ 0x80
 8004bfe:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004c06:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <HIF_UART_Init+0xe4>)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c1e:	d302      	bcc.n	8004c26 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004c20:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8004c24:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4a11      	ldr	r2, [pc, #68]	@ (8004c78 <HIF_UART_Init+0xe8>)
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004c36:	4a11      	ldr	r2, [pc, #68]	@ (8004c7c <HIF_UART_Init+0xec>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004c3c:	4a10      	ldr	r2, [pc, #64]	@ (8004c80 <HIF_UART_Init+0xf0>)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004c42:	2106      	movs	r1, #6
 8004c44:	2026      	movs	r0, #38	@ 0x26
 8004c46:	f7ff feab 	bl	80049a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c4a:	2026      	movs	r0, #38	@ 0x26
 8004c4c:	f7ff fe8a 	bl	8004964 <__NVIC_EnableIRQ>
}
 8004c50:	bf00      	nop
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023840 	.word	0x40023840
 8004c5c:	40023830 	.word	0x40023830
 8004c60:	40020020 	.word	0x40020020
 8004c64:	40020000 	.word	0x40020000
 8004c68:	4000440c 	.word	0x4000440c
 8004c6c:	40004410 	.word	0x40004410
 8004c70:	40004414 	.word	0x40004414
 8004c74:	0501bd00 	.word	0x0501bd00
 8004c78:	40004408 	.word	0x40004408
 8004c7c:	20012ecc 	.word	0x20012ecc
 8004c80:	20012ed0 	.word	0x20012ed0

08004c84 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c8a:	4b26      	ldr	r3, [pc, #152]	@ (8004d24 <_DoInit+0xa0>)
 8004c8c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004c8e:	22a8      	movs	r2, #168	@ 0xa8
 8004c90:	2100      	movs	r1, #0
 8004c92:	6838      	ldr	r0, [r7, #0]
 8004c94:	f002 f98a 	bl	8006fac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2203      	movs	r2, #3
 8004ca2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	4a20      	ldr	r2, [pc, #128]	@ (8004d28 <_DoInit+0xa4>)
 8004ca8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <_DoInit+0xa8>)
 8004cae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cb6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <_DoInit+0xa4>)
 8004cce:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	@ (8004d30 <_DoInit+0xac>)
 8004cd4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cee:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	e00c      	b.n	8004d12 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f1c3 030f 	rsb	r3, r3, #15
 8004cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8004d34 <_DoInit+0xb0>)
 8004d00:	5cd1      	ldrb	r1, [r2, r3]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4413      	add	r3, r2
 8004d08:	460a      	mov	r2, r1
 8004d0a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b0f      	cmp	r3, #15
 8004d16:	d9ef      	bls.n	8004cf8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004d18:	f3bf 8f5f 	dmb	sy
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20012ed4 	.word	0x20012ed4
 8004d28:	08007160 	.word	0x08007160
 8004d2c:	20012f7c 	.word	0x20012f7c
 8004d30:	2001337c 	.word	0x2001337c
 8004d34:	080071a0 	.word	0x080071a0

08004d38 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	@ 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d44:	2300      	movs	r3, #0
 8004d46:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d905      	bls.n	8004d68 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d66:	e007      	b.n	8004d78 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	69b9      	ldr	r1, [r7, #24]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	1acb      	subs	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3b01      	subs	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bf28      	it	cs
 8004d86:	4613      	movcs	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	bf28      	it	cs
 8004d92:	4613      	movcs	r3, r2
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	6978      	ldr	r0, [r7, #20]
 8004da6:	f002 f92d 	bl	8007004 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	4413      	add	r3, r2
 8004db0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	4413      	add	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	4413      	add	r3, r2
 8004dc8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d101      	bne.n	8004dd8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dd8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1b2      	bne.n	8004d4e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004de8:	6a3b      	ldr	r3, [r7, #32]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3728      	adds	r7, #40	@ 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b088      	sub	sp, #32
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d911      	bls.n	8004e3a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	6938      	ldr	r0, [r7, #16]
 8004e26:	f002 f8ed 	bl	8007004 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e2a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	441a      	add	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e38:	e01f      	b.n	8004e7a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	6938      	ldr	r0, [r7, #16]
 8004e4e:	f002 f8d9 	bl	8007004 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	4413      	add	r3, r2
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6938      	ldr	r0, [r7, #16]
 8004e6c:	f002 f8ca 	bl	8007004 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e70:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	60da      	str	r2, [r3, #12]
}
 8004e7a:	bf00      	nop
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d808      	bhi.n	8004eb0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad2      	subs	r2, r2, r3
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e004      	b.n	8004eba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004eba:	697b      	ldr	r3, [r7, #20]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08c      	sub	sp, #48	@ 0x30
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ed6:	623b      	str	r3, [r7, #32]
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b53      	cmp	r3, #83	@ 0x53
 8004ee0:	d001      	beq.n	8004ee6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004ee2:	f7ff fecf 	bl	8004c84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4a37      	ldr	r2, [pc, #220]	@ (8004fd0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d92b      	bls.n	8004f6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bf28      	it	cs
 8004f26:	4613      	movcs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f30:	4413      	add	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	6939      	ldr	r1, [r7, #16]
 8004f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f3a:	f002 f863 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4413      	add	r3, r2
 8004f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d101      	bne.n	8004f6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	bf28      	it	cs
 8004f7c:	4613      	movcs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d019      	beq.n	8004fba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	4413      	add	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	6939      	ldr	r1, [r7, #16]
 8004f94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f96:	f002 f835 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3730      	adds	r7, #48	@ 0x30
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20012ed4 	.word	0x20012ed4

08004fd4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08c      	sub	sp, #48	@ 0x30
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80050dc <SEGGER_RTT_ReadNoLock+0x108>)
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b53      	cmp	r3, #83	@ 0x53
 8004fec:	d001      	beq.n	8004ff2 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fee:	f7ff fe49 	bl	8004c84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	4413      	add	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	3360      	adds	r3, #96	@ 0x60
 8004ffe:	4a37      	ldr	r2, [pc, #220]	@ (80050dc <SEGGER_RTT_ReadNoLock+0x108>)
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	429a      	cmp	r2, r3
 800501e:	d92b      	bls.n	8005078 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4293      	cmp	r3, r2
 8005030:	bf28      	it	cs
 8005032:	4613      	movcs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503c:	4413      	add	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	6939      	ldr	r1, [r7, #16]
 8005044:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005046:	f001 ffdd 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 800504a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	4413      	add	r3, r2
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005070:	429a      	cmp	r2, r3
 8005072:	d101      	bne.n	8005078 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005074:	2300      	movs	r3, #0
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4293      	cmp	r3, r2
 8005086:	bf28      	it	cs
 8005088:	4613      	movcs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d019      	beq.n	80050c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005098:	4413      	add	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	6939      	ldr	r1, [r7, #16]
 80050a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050a2:	f001 ffaf 	bl	8007004 <memcpy>
    NumBytesRead += NumBytesRem;
 80050a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	4413      	add	r3, r2
 80050ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80050c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3730      	adds	r7, #48	@ 0x30
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20012ed4 	.word	0x20012ed4

080050e0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	3360      	adds	r3, #96	@ 0x60
 80050fc:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050fe:	4413      	add	r3, r2
 8005100:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d029      	beq.n	800515e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800510a:	2b02      	cmp	r3, #2
 800510c:	d82e      	bhi.n	800516c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005112:	2b01      	cmp	r3, #1
 8005114:	d013      	beq.n	800513e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005116:	e029      	b.n	800516c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005118:	6978      	ldr	r0, [r7, #20]
 800511a:	f7ff feb2 	bl	8004e82 <_GetAvailWriteSpace>
 800511e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d202      	bcs.n	800512e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800512c:	e021      	b.n	8005172 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	6978      	ldr	r0, [r7, #20]
 8005138:	f7ff fe5b 	bl	8004df2 <_WriteNoCheck>
    break;
 800513c:	e019      	b.n	8005172 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800513e:	6978      	ldr	r0, [r7, #20]
 8005140:	f7ff fe9f 	bl	8004e82 <_GetAvailWriteSpace>
 8005144:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4293      	cmp	r3, r2
 800514c:	bf28      	it	cs
 800514e:	4613      	movcs	r3, r2
 8005150:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f7ff fe4b 	bl	8004df2 <_WriteNoCheck>
    break;
 800515c:	e009      	b.n	8005172 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	69b9      	ldr	r1, [r7, #24]
 8005162:	6978      	ldr	r0, [r7, #20]
 8005164:	f7ff fde8 	bl	8004d38 <_WriteBlocking>
 8005168:	61f8      	str	r0, [r7, #28]
    break;
 800516a:	e002      	b.n	8005172 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
    break;
 8005170:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005172:	69fb      	ldr	r3, [r7, #28]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20012ed4 	.word	0x20012ed4

08005180 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005180:	b580      	push	{r7, lr}
 8005182:	b088      	sub	sp, #32
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800518c:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b53      	cmp	r3, #83	@ 0x53
 8005198:	d001      	beq.n	800519e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800519a:	f7ff fd73 	bl	8004c84 <_DoInit>
  SEGGER_RTT_LOCK();
 800519e:	f3ef 8311 	mrs	r3, BASEPRI
 80051a2:	f04f 0120 	mov.w	r1, #32
 80051a6:	f381 8811 	msr	BASEPRI, r1
 80051aa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	68b9      	ldr	r1, [r7, #8]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff95 	bl	80050e0 <SEGGER_RTT_WriteDownBufferNoLock>
 80051b6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3720      	adds	r7, #32
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	20012ed4 	.word	0x20012ed4

080051cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b088      	sub	sp, #32
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
 80051d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051da:	4b3d      	ldr	r3, [pc, #244]	@ (80052d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b53      	cmp	r3, #83	@ 0x53
 80051e6:	d001      	beq.n	80051ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80051e8:	f7ff fd4c 	bl	8004c84 <_DoInit>
  SEGGER_RTT_LOCK();
 80051ec:	f3ef 8311 	mrs	r3, BASEPRI
 80051f0:	f04f 0120 	mov.w	r1, #32
 80051f4:	f381 8811 	msr	BASEPRI, r1
 80051f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051fa:	4b35      	ldr	r3, [pc, #212]	@ (80052d0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005202:	6939      	ldr	r1, [r7, #16]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	3304      	adds	r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3301      	adds	r3, #1
 800521e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	429a      	cmp	r2, r3
 8005228:	dbeb      	blt.n	8005202 <SEGGER_RTT_AllocUpBuffer+0x36>
 800522a:	e000      	b.n	800522e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800522c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	429a      	cmp	r2, r3
 8005236:	da3f      	bge.n	80052b8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005238:	6939      	ldr	r1, [r7, #16]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	440b      	add	r3, r1
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800524c:	6939      	ldr	r1, [r7, #16]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	440b      	add	r3, r1
 800525c:	3304      	adds	r3, #4
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	4613      	mov	r3, r2
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4413      	add	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	440b      	add	r3, r1
 8005270:	3320      	adds	r3, #32
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005276:	6939      	ldr	r1, [r7, #16]
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	4613      	mov	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	3328      	adds	r3, #40	@ 0x28
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	440b      	add	r3, r1
 8005298:	3324      	adds	r3, #36	@ 0x24
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800529e:	6939      	ldr	r1, [r7, #16]
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	440b      	add	r3, r1
 80052ac:	332c      	adds	r3, #44	@ 0x2c
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052b2:	f3bf 8f5f 	dmb	sy
 80052b6:	e002      	b.n	80052be <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052c4:	69fb      	ldr	r3, [r7, #28]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20012ed4 	.word	0x20012ed4

080052d4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	@ 0x28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80052e2:	4b21      	ldr	r3, [pc, #132]	@ (8005368 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b53      	cmp	r3, #83	@ 0x53
 80052ee:	d001      	beq.n	80052f4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052f0:	f7ff fcc8 	bl	8004c84 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005368 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052f6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d82c      	bhi.n	8005358 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80052fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005302:	f04f 0120 	mov.w	r1, #32
 8005306:	f381 8811 	msr	BASEPRI, r1
 800530a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	3360      	adds	r3, #96	@ 0x60
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2200      	movs	r2, #0
 8005340:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005346:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005348:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
 8005356:	e002      	b.n	800535e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005358:	f04f 33ff 	mov.w	r3, #4294967295
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005360:	4618      	mov	r0, r3
 8005362:	3728      	adds	r7, #40	@ 0x28
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20012ed4 	.word	0x20012ed4

0800536c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	60fa      	str	r2, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e022      	b.n	80053d0 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	60fa      	str	r2, [r7, #12]
 8005394:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d90a      	bls.n	80053b2 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800539c:	2380      	movs	r3, #128	@ 0x80
 800539e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80053a0:	e007      	b.n	80053b2 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	1c53      	adds	r3, r2, #1
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1c59      	adds	r1, r3, #1
 80053ac:	60f9      	str	r1, [r7, #12]
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	1e5a      	subs	r2, r3, #1
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <_EncodeStr+0x58>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ee      	bne.n	80053a2 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80053d0:	68fb      	ldr	r3, [r7, #12]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3307      	adds	r3, #7
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
	...

080053f8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053fe:	4b34      	ldr	r3, [pc, #208]	@ (80054d0 <_HandleIncomingPacket+0xd8>)
 8005400:	7e1b      	ldrb	r3, [r3, #24]
 8005402:	4618      	mov	r0, r3
 8005404:	1cfb      	adds	r3, r7, #3
 8005406:	2201      	movs	r2, #1
 8005408:	4619      	mov	r1, r3
 800540a:	f7ff fde3 	bl	8004fd4 <SEGGER_RTT_ReadNoLock>
 800540e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d057      	beq.n	80054c6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8005416:	78fb      	ldrb	r3, [r7, #3]
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	d031      	beq.n	8005480 <_HandleIncomingPacket+0x88>
 800541c:	2b80      	cmp	r3, #128	@ 0x80
 800541e:	dc40      	bgt.n	80054a2 <_HandleIncomingPacket+0xaa>
 8005420:	2b07      	cmp	r3, #7
 8005422:	dc15      	bgt.n	8005450 <_HandleIncomingPacket+0x58>
 8005424:	2b00      	cmp	r3, #0
 8005426:	dd3c      	ble.n	80054a2 <_HandleIncomingPacket+0xaa>
 8005428:	3b01      	subs	r3, #1
 800542a:	2b06      	cmp	r3, #6
 800542c:	d839      	bhi.n	80054a2 <_HandleIncomingPacket+0xaa>
 800542e:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <_HandleIncomingPacket+0x3c>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	08005457 	.word	0x08005457
 8005438:	0800545d 	.word	0x0800545d
 800543c:	08005463 	.word	0x08005463
 8005440:	08005469 	.word	0x08005469
 8005444:	0800546f 	.word	0x0800546f
 8005448:	08005475 	.word	0x08005475
 800544c:	0800547b 	.word	0x0800547b
 8005450:	2b7f      	cmp	r3, #127	@ 0x7f
 8005452:	d033      	beq.n	80054bc <_HandleIncomingPacket+0xc4>
 8005454:	e025      	b.n	80054a2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005456:	f000 feeb 	bl	8006230 <SEGGER_SYSVIEW_Start>
      break;
 800545a:	e034      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800545c:	f000 ffa4 	bl	80063a8 <SEGGER_SYSVIEW_Stop>
      break;
 8005460:	e031      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005462:	f001 f97d 	bl	8006760 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005466:	e02e      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005468:	f001 f942 	bl	80066f0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800546c:	e02b      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800546e:	f000 ffc1 	bl	80063f4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005472:	e028      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005474:	f001 fcae 	bl	8006dd4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005478:	e025      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800547a:	f001 fc8d 	bl	8006d98 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800547e:	e022      	b.n	80054c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005480:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <_HandleIncomingPacket+0xd8>)
 8005482:	7e1b      	ldrb	r3, [r3, #24]
 8005484:	4618      	mov	r0, r3
 8005486:	1cfb      	adds	r3, r7, #3
 8005488:	2201      	movs	r2, #1
 800548a:	4619      	mov	r1, r3
 800548c:	f7ff fda2 	bl	8004fd4 <SEGGER_RTT_ReadNoLock>
 8005490:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fbf2 	bl	8006c84 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80054a0:	e00e      	b.n	80054c0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	da0c      	bge.n	80054c4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054aa:	4b09      	ldr	r3, [pc, #36]	@ (80054d0 <_HandleIncomingPacket+0xd8>)
 80054ac:	7e1b      	ldrb	r3, [r3, #24]
 80054ae:	4618      	mov	r0, r3
 80054b0:	1cfb      	adds	r3, r7, #3
 80054b2:	2201      	movs	r2, #1
 80054b4:	4619      	mov	r1, r3
 80054b6:	f7ff fd8d 	bl	8004fd4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80054ba:	e003      	b.n	80054c4 <_HandleIncomingPacket+0xcc>
      break;
 80054bc:	bf00      	nop
 80054be:	e002      	b.n	80054c6 <_HandleIncomingPacket+0xce>
      break;
 80054c0:	bf00      	nop
 80054c2:	e000      	b.n	80054c6 <_HandleIncomingPacket+0xce>
      break;
 80054c4:	bf00      	nop
    }
  }
}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20014394 	.word	0x20014394

080054d4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08c      	sub	sp, #48	@ 0x30
 80054d8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054da:	2301      	movs	r3, #1
 80054dc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	3301      	adds	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e8:	4b32      	ldr	r3, [pc, #200]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ee:	e00b      	b.n	8005508 <_TrySendOverflowPacket+0x34>
 80054f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80054fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005504:	09db      	lsrs	r3, r3, #7
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	2b7f      	cmp	r3, #127	@ 0x7f
 800550c:	d8f0      	bhi.n	80054f0 <_TrySendOverflowPacket+0x1c>
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800551e:	4b26      	ldr	r3, [pc, #152]	@ (80055b8 <_TrySendOverflowPacket+0xe4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8005524:	4b23      	ldr	r3, [pc, #140]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	627b      	str	r3, [r7, #36]	@ 0x24
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	e00b      	b.n	8005550 <_TrySendOverflowPacket+0x7c>
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	6279      	str	r1, [r7, #36]	@ 0x24
 8005542:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	09db      	lsrs	r3, r3, #7
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2b7f      	cmp	r3, #127	@ 0x7f
 8005554:	d8f0      	bhi.n	8005538 <_TrySendOverflowPacket+0x64>
 8005556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	627a      	str	r2, [r7, #36]	@ 0x24
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005566:	4b13      	ldr	r3, [pc, #76]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	4618      	mov	r0, r3
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	461a      	mov	r2, r3
 8005574:	1d3b      	adds	r3, r7, #4
 8005576:	4619      	mov	r1, r3
 8005578:	f7fa fe3a 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800557c:	4603      	mov	r3, r0
 800557e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005580:	f7ff faf6 	bl	8004b70 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d009      	beq.n	800559e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800558a:	4a0a      	ldr	r2, [pc, #40]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005590:	4b08      	ldr	r3, [pc, #32]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	4b06      	ldr	r3, [pc, #24]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e004      	b.n	80055a8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800559e:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a03      	ldr	r2, [pc, #12]	@ (80055b4 <_TrySendOverflowPacket+0xe0>)
 80055a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80055a8:	693b      	ldr	r3, [r7, #16]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3730      	adds	r7, #48	@ 0x30
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20014394 	.word	0x20014394
 80055b8:	e0001004 	.word	0xe0001004

080055bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	@ 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80055c8:	4b96      	ldr	r3, [pc, #600]	@ (8005824 <_SendPacket+0x268>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d010      	beq.n	80055f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055d0:	4b94      	ldr	r3, [pc, #592]	@ (8005824 <_SendPacket+0x268>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8130 	beq.w	800583a <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055da:	4b92      	ldr	r3, [pc, #584]	@ (8005824 <_SendPacket+0x268>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d109      	bne.n	80055f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055e2:	f7ff ff77 	bl	80054d4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055e6:	4b8f      	ldr	r3, [pc, #572]	@ (8005824 <_SendPacket+0x268>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	f040 8127 	bne.w	800583e <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80055f0:	e001      	b.n	80055f6 <_SendPacket+0x3a>
    goto Send;
 80055f2:	bf00      	nop
 80055f4:	e000      	b.n	80055f8 <_SendPacket+0x3c>
Send:
 80055f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b1f      	cmp	r3, #31
 80055fc:	d809      	bhi.n	8005612 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055fe:	4b89      	ldr	r3, [pc, #548]	@ (8005824 <_SendPacket+0x268>)
 8005600:	69da      	ldr	r2, [r3, #28]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	f040 8118 	bne.w	8005842 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b17      	cmp	r3, #23
 8005616:	d807      	bhi.n	8005628 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b01      	subs	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e0c4      	b.n	80057b2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b7f      	cmp	r3, #127	@ 0x7f
 8005634:	d912      	bls.n	800565c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	09da      	lsrs	r2, r3, #7
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b01      	subs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	3a01      	subs	r2, #1
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e006      	b.n	800566a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b01      	subs	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b7e      	cmp	r3, #126	@ 0x7e
 800566e:	d807      	bhi.n	8005680 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3b01      	subs	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	b2da      	uxtb	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	701a      	strb	r2, [r3, #0]
 800567e:	e098      	b.n	80057b2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005686:	d212      	bcs.n	80056ae <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	09da      	lsrs	r2, r3, #7
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3b01      	subs	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	3a01      	subs	r2, #1
 80056a0:	60fa      	str	r2, [r7, #12]
 80056a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	701a      	strb	r2, [r3, #0]
 80056ac:	e081      	b.n	80057b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056b4:	d21d      	bcs.n	80056f2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	0b9a      	lsrs	r2, r3, #14
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b01      	subs	r3, #1
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	09db      	lsrs	r3, r3, #7
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	3a01      	subs	r2, #1
 80056d0:	60fa      	str	r2, [r7, #12]
 80056d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	3a01      	subs	r2, #1
 80056e4:	60fa      	str	r2, [r7, #12]
 80056e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e05f      	b.n	80057b2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056f8:	d228      	bcs.n	800574c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0d5a      	lsrs	r2, r3, #21
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b01      	subs	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	0b9b      	lsrs	r3, r3, #14
 800570e:	b2db      	uxtb	r3, r3
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	3a01      	subs	r2, #1
 8005714:	60fa      	str	r2, [r7, #12]
 8005716:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	09db      	lsrs	r3, r3, #7
 8005724:	b2db      	uxtb	r3, r3
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	3a01      	subs	r2, #1
 800572a:	60fa      	str	r2, [r7, #12]
 800572c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005730:	b2da      	uxtb	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	3a01      	subs	r2, #1
 800573e:	60fa      	str	r2, [r7, #12]
 8005740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e032      	b.n	80057b2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	0f1a      	lsrs	r2, r3, #28
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3b01      	subs	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	0d5b      	lsrs	r3, r3, #21
 8005760:	b2db      	uxtb	r3, r3
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	3a01      	subs	r2, #1
 8005766:	60fa      	str	r2, [r7, #12]
 8005768:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800576c:	b2da      	uxtb	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0b9b      	lsrs	r3, r3, #14
 8005776:	b2db      	uxtb	r3, r3
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	3a01      	subs	r2, #1
 800577c:	60fa      	str	r2, [r7, #12]
 800577e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	09db      	lsrs	r3, r3, #7
 800578c:	b2db      	uxtb	r3, r3
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	3a01      	subs	r2, #1
 8005792:	60fa      	str	r2, [r7, #12]
 8005794:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005798:	b2da      	uxtb	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	3a01      	subs	r2, #1
 80057a6:	60fa      	str	r2, [r7, #12]
 80057a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005828 <_SendPacket+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005824 <_SendPacket+0x268>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	e00b      	b.n	80057e4 <_SendPacket+0x228>
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	6279      	str	r1, [r7, #36]	@ 0x24
 80057d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80057e8:	d8f0      	bhi.n	80057cc <_SendPacket+0x210>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80057fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005824 <_SendPacket+0x268>)
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	4618      	mov	r0, r3
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	461a      	mov	r2, r3
 8005808:	68f9      	ldr	r1, [r7, #12]
 800580a:	f7fa fcf1 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800580e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005810:	f7ff f9ae 	bl	8004b70 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800581a:	4a02      	ldr	r2, [pc, #8]	@ (8005824 <_SendPacket+0x268>)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	60d3      	str	r3, [r2, #12]
 8005820:	e010      	b.n	8005844 <_SendPacket+0x288>
 8005822:	bf00      	nop
 8005824:	20014394 	.word	0x20014394
 8005828:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800582c:	4b19      	ldr	r3, [pc, #100]	@ (8005894 <_SendPacket+0x2d8>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	4b17      	ldr	r3, [pc, #92]	@ (8005894 <_SendPacket+0x2d8>)
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	e004      	b.n	8005844 <_SendPacket+0x288>
    goto SendDone;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <_SendPacket+0x288>
      goto SendDone;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <_SendPacket+0x288>
      goto SendDone;
 8005842:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005844:	4b13      	ldr	r3, [pc, #76]	@ (8005894 <_SendPacket+0x2d8>)
 8005846:	7e1b      	ldrb	r3, [r3, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	4a13      	ldr	r2, [pc, #76]	@ (8005898 <_SendPacket+0x2dc>)
 800584c:	460b      	mov	r3, r1
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	440b      	add	r3, r1
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	336c      	adds	r3, #108	@ 0x6c
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b0e      	ldr	r3, [pc, #56]	@ (8005894 <_SendPacket+0x2d8>)
 800585c:	7e1b      	ldrb	r3, [r3, #24]
 800585e:	4618      	mov	r0, r3
 8005860:	490d      	ldr	r1, [pc, #52]	@ (8005898 <_SendPacket+0x2dc>)
 8005862:	4603      	mov	r3, r0
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4403      	add	r3, r0
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	3370      	adds	r3, #112	@ 0x70
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d00b      	beq.n	800588c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005874:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <_SendPacket+0x2d8>)
 8005876:	789b      	ldrb	r3, [r3, #2]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d107      	bne.n	800588c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800587c:	4b05      	ldr	r3, [pc, #20]	@ (8005894 <_SendPacket+0x2d8>)
 800587e:	2201      	movs	r2, #1
 8005880:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005882:	f7ff fdb9 	bl	80053f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005886:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <_SendPacket+0x2d8>)
 8005888:	2200      	movs	r2, #0
 800588a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800588c:	bf00      	nop
 800588e:	3728      	adds	r7, #40	@ 0x28
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20014394 	.word	0x20014394
 8005898:	20012ed4 	.word	0x20012ed4

0800589c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	@ 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	3301      	adds	r3, #1
 80058b2:	2b80      	cmp	r3, #128	@ 0x80
 80058b4:	d80a      	bhi.n	80058cc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6051      	str	r1, [r2, #4]
 80058c0:	78fa      	ldrb	r2, [r7, #3]
 80058c2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	2b80      	cmp	r3, #128	@ 0x80
 80058d2:	d15a      	bne.n	800598a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	623b      	str	r3, [r7, #32]
 80058f4:	e00b      	b.n	800590e <_StoreChar+0x72>
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	1c59      	adds	r1, r3, #1
 80058fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8005900:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	09db      	lsrs	r3, r3, #7
 800590c:	623b      	str	r3, [r7, #32]
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	2b7f      	cmp	r3, #127	@ 0x7f
 8005912:	d8f0      	bhi.n	80058f6 <_StoreChar+0x5a>
 8005914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	627a      	str	r2, [r7, #36]	@ 0x24
 800591a:	6a3a      	ldr	r2, [r7, #32]
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	2300      	movs	r3, #0
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	e00b      	b.n	8005946 <_StoreChar+0xaa>
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	1c59      	adds	r1, r3, #1
 8005936:	61f9      	str	r1, [r7, #28]
 8005938:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	09db      	lsrs	r3, r3, #7
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b7f      	cmp	r3, #127	@ 0x7f
 800594a:	d8f0      	bhi.n	800592e <_StoreChar+0x92>
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	61fa      	str	r2, [r7, #28]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	221a      	movs	r2, #26
 8005962:	6939      	ldr	r1, [r7, #16]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fe29 	bl	80055bc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fd35 	bl	80053de <_PreparePacket>
 8005974:	4602      	mov	r2, r0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
  }
}
 800598a:	bf00      	nop
 800598c:	3728      	adds	r7, #40	@ 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	@ 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80059a6:	2301      	movs	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80059aa:	2301      	movs	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059ae:	e007      	b.n	80059c0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	623b      	str	r3, [r7, #32]
    Width++;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3301      	adds	r3, #1
 80059be:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d2f3      	bcs.n	80059b0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d901      	bls.n	80059d4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d000      	beq.n	80059e0 <_PrintUnsigned+0x4c>
 80059de:	e01f      	b.n	8005a20 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d01c      	beq.n	8005a20 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80059e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <_PrintUnsigned+0x68>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d102      	bne.n	80059fc <_PrintUnsigned+0x68>
        c = '0';
 80059f6:	2330      	movs	r3, #48	@ 0x30
 80059f8:	76fb      	strb	r3, [r7, #27]
 80059fa:	e001      	b.n	8005a00 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80059fc:	2320      	movs	r3, #32
 80059fe:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a00:	e007      	b.n	8005a12 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	3b01      	subs	r3, #1
 8005a06:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005a08:	7efb      	ldrb	r3, [r7, #27]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff ff45 	bl	800589c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <_PrintUnsigned+0x8c>
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d3f0      	bcc.n	8005a02 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d903      	bls.n	8005a2e <_PrintUnsigned+0x9a>
      NumDigits--;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	e009      	b.n	8005a42 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d200      	bcs.n	8005a42 <_PrintUnsigned+0xae>
        break;
 8005a40:	e005      	b.n	8005a4e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a4c:	e7e8      	b.n	8005a20 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a56:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5c:	fb02 f303 	mul.w	r3, r2, r3
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a66:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <_PrintUnsigned+0x128>)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ff13 	bl	800589c <_StoreChar>
    Digit /= Base;
 8005a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e3      	bne.n	8005a4e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d011      	beq.n	8005ab4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00e      	beq.n	8005ab4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a96:	e006      	b.n	8005aa6 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a9e:	2120      	movs	r1, #32
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff fefb 	bl	800589c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <_PrintUnsigned+0x120>
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d3f1      	bcc.n	8005a98 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3728      	adds	r7, #40	@ 0x28
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	080071c0 	.word	0x080071c0

08005ac0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bfb8      	it	lt
 8005ad4:	425b      	neglt	r3, r3
 8005ad6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005adc:	e007      	b.n	8005aee <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ae6:	613b      	str	r3, [r7, #16]
    Width++;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	daf3      	bge.n	8005ade <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d901      	bls.n	8005b02 <_PrintInt+0x42>
    Width = NumDigits;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <_PrintInt+0x5e>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	db04      	blt.n	8005b18 <_PrintInt+0x58>
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <_PrintInt+0x5e>
    FieldWidth--;
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <_PrintInt+0x6e>
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d016      	beq.n	8005b5c <_PrintInt+0x9c>
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d111      	bne.n	8005b5c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00e      	beq.n	8005b5c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b3e:	e006      	b.n	8005b4e <_PrintInt+0x8e>
        FieldWidth--;
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b46:	2120      	movs	r1, #32
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7ff fea7 	bl	800589c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <_PrintInt+0x9c>
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3f1      	bcc.n	8005b40 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da07      	bge.n	8005b72 <_PrintInt+0xb2>
    v = -v;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	425b      	negs	r3, r3
 8005b66:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b68:	212d      	movs	r1, #45	@ 0x2d
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff fe96 	bl	800589c <_StoreChar>
 8005b70:	e008      	b.n	8005b84 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b7c:	212b      	movs	r1, #43	@ 0x2b
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fe8c 	bl	800589c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d019      	beq.n	8005bc2 <_PrintInt+0x102>
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d114      	bne.n	8005bc2 <_PrintInt+0x102>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d111      	bne.n	8005bc2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00e      	beq.n	8005bc2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ba4:	e006      	b.n	8005bb4 <_PrintInt+0xf4>
        FieldWidth--;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005bac:	2130      	movs	r1, #48	@ 0x30
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fe74 	bl	800589c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <_PrintInt+0x102>
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d3f1      	bcc.n	8005ba6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff fedf 	bl	8005994 <_PrintUnsigned>
}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
	...

08005be0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b098      	sub	sp, #96	@ 0x60
 8005be4:	af02      	add	r7, sp, #8
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bec:	f3ef 8311 	mrs	r3, BASEPRI
 8005bf0:	f04f 0120 	mov.w	r1, #32
 8005bf4:	f381 8811 	msr	BASEPRI, r1
 8005bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bfa:	48b7      	ldr	r0, [pc, #732]	@ (8005ed8 <_VPrintTarget+0x2f8>)
 8005bfc:	f7ff fbef 	bl	80053de <_PreparePacket>
 8005c00:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005c02:	4bb5      	ldr	r3, [pc, #724]	@ (8005ed8 <_VPrintTarget+0x2f8>)
 8005c04:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005c06:	2300      	movs	r3, #0
 8005c08:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	3301      	adds	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005c26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 81a8 	beq.w	8005f80 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005c30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c34:	2b25      	cmp	r3, #37	@ 0x25
 8005c36:	f040 8195 	bne.w	8005f64 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c4e:	3b23      	subs	r3, #35	@ 0x23
 8005c50:	2b0d      	cmp	r3, #13
 8005c52:	d83f      	bhi.n	8005cd4 <_VPrintTarget+0xf4>
 8005c54:	a201      	add	r2, pc, #4	@ (adr r2, 8005c5c <_VPrintTarget+0x7c>)
 8005c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5a:	bf00      	nop
 8005c5c:	08005cc5 	.word	0x08005cc5
 8005c60:	08005cd5 	.word	0x08005cd5
 8005c64:	08005cd5 	.word	0x08005cd5
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005cd5 	.word	0x08005cd5
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005cd5 	.word	0x08005cd5
 8005c7c:	08005cb5 	.word	0x08005cb5
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005ca5 	.word	0x08005ca5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c96:	f043 0301 	orr.w	r3, r3, #1
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e01a      	b.n	8005cda <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	e012      	b.n	8005cda <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cb6:	f043 0304 	orr.w	r3, r3, #4
 8005cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]
 8005cc2:	e00a      	b.n	8005cda <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc6:	f043 0308 	orr.w	r3, r3, #8
 8005cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	e002      	b.n	8005cda <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cd8:	bf00      	nop
        }
      } while (v);
 8005cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1b0      	bne.n	8005c42 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005cec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cf0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cf2:	d912      	bls.n	8005d1a <_VPrintTarget+0x13a>
 8005cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cf8:	2b39      	cmp	r3, #57	@ 0x39
 8005cfa:	d80e      	bhi.n	8005d1a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	005b      	lsls	r3, r3, #1
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d12:	4413      	add	r3, r2
 8005d14:	3b30      	subs	r3, #48	@ 0x30
 8005d16:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005d18:	e7e4      	b.n	8005ce4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005d26:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d2c:	d11d      	bne.n	8005d6a <_VPrintTarget+0x18a>
        sFormat++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d40:	2b2f      	cmp	r3, #47	@ 0x2f
 8005d42:	d912      	bls.n	8005d6a <_VPrintTarget+0x18a>
 8005d44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d48:	2b39      	cmp	r3, #57	@ 0x39
 8005d4a:	d80e      	bhi.n	8005d6a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d62:	4413      	add	r3, r2
 8005d64:	3b30      	subs	r3, #48	@ 0x30
 8005d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005d68:	e7e4      	b.n	8005d34 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d72:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d76:	2b6c      	cmp	r3, #108	@ 0x6c
 8005d78:	d003      	beq.n	8005d82 <_VPrintTarget+0x1a2>
 8005d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d7e:	2b68      	cmp	r3, #104	@ 0x68
 8005d80:	d107      	bne.n	8005d92 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d90:	e7ef      	b.n	8005d72 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d96:	2b25      	cmp	r3, #37	@ 0x25
 8005d98:	f000 80d8 	beq.w	8005f4c <_VPrintTarget+0x36c>
 8005d9c:	2b25      	cmp	r3, #37	@ 0x25
 8005d9e:	f2c0 80dc 	blt.w	8005f5a <_VPrintTarget+0x37a>
 8005da2:	2b78      	cmp	r3, #120	@ 0x78
 8005da4:	f300 80d9 	bgt.w	8005f5a <_VPrintTarget+0x37a>
 8005da8:	2b58      	cmp	r3, #88	@ 0x58
 8005daa:	f2c0 80d6 	blt.w	8005f5a <_VPrintTarget+0x37a>
 8005dae:	3b58      	subs	r3, #88	@ 0x58
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	f200 80d2 	bhi.w	8005f5a <_VPrintTarget+0x37a>
 8005db6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <_VPrintTarget+0x1dc>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005eb3 	.word	0x08005eb3
 8005dc0:	08005f5b 	.word	0x08005f5b
 8005dc4:	08005f5b 	.word	0x08005f5b
 8005dc8:	08005f5b 	.word	0x08005f5b
 8005dcc:	08005f5b 	.word	0x08005f5b
 8005dd0:	08005f5b 	.word	0x08005f5b
 8005dd4:	08005f5b 	.word	0x08005f5b
 8005dd8:	08005f5b 	.word	0x08005f5b
 8005ddc:	08005f5b 	.word	0x08005f5b
 8005de0:	08005f5b 	.word	0x08005f5b
 8005de4:	08005f5b 	.word	0x08005f5b
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e67 	.word	0x08005e67
 8005df0:	08005f5b 	.word	0x08005f5b
 8005df4:	08005f5b 	.word	0x08005f5b
 8005df8:	08005f5b 	.word	0x08005f5b
 8005dfc:	08005f5b 	.word	0x08005f5b
 8005e00:	08005f5b 	.word	0x08005f5b
 8005e04:	08005f5b 	.word	0x08005f5b
 8005e08:	08005f5b 	.word	0x08005f5b
 8005e0c:	08005f5b 	.word	0x08005f5b
 8005e10:	08005f5b 	.word	0x08005f5b
 8005e14:	08005f5b 	.word	0x08005f5b
 8005e18:	08005f5b 	.word	0x08005f5b
 8005e1c:	08005f27 	.word	0x08005f27
 8005e20:	08005f5b 	.word	0x08005f5b
 8005e24:	08005f5b 	.word	0x08005f5b
 8005e28:	08005edd 	.word	0x08005edd
 8005e2c:	08005f5b 	.word	0x08005f5b
 8005e30:	08005e8d 	.word	0x08005e8d
 8005e34:	08005f5b 	.word	0x08005f5b
 8005e38:	08005f5b 	.word	0x08005f5b
 8005e3c:	08005eb3 	.word	0x08005eb3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1d19      	adds	r1, r3, #4
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6011      	str	r1, [r2, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005e54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005e58:	f107 0310 	add.w	r3, r7, #16
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fd1c 	bl	800589c <_StoreChar>
        break;
 8005e64:	e07a      	b.n	8005f5c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1d19      	adds	r1, r3, #4
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6011      	str	r1, [r2, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e74:	f107 0010 	add.w	r0, r7, #16
 8005e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e82:	220a      	movs	r2, #10
 8005e84:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e86:	f7ff fe1b 	bl	8005ac0 <_PrintInt>
        break;
 8005e8a:	e067      	b.n	8005f5c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	1d19      	adds	r1, r3, #4
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6011      	str	r1, [r2, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e9c:	f107 0010 	add.w	r0, r7, #16
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eaa:	220a      	movs	r2, #10
 8005eac:	f7ff fd72 	bl	8005994 <_PrintUnsigned>
        break;
 8005eb0:	e054      	b.n	8005f5c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1d19      	adds	r1, r3, #4
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6011      	str	r1, [r2, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005ec0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ec2:	f107 0010 	add.w	r0, r7, #16
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	f7ff fd5f 	bl	8005994 <_PrintUnsigned>
        break;
 8005ed6:	e041      	b.n	8005f5c <_VPrintTarget+0x37c>
 8005ed8:	200143c4 	.word	0x200143c4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	1d19      	adds	r1, r3, #4
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6011      	str	r1, [r2, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <_VPrintTarget+0x314>
          s = "(null)";
 8005ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800601c <_VPrintTarget+0x43c>)
 8005ef2:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efe:	3301      	adds	r3, #1
 8005f00:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005f02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00b      	beq.n	8005f22 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005f0a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005f0e:	f107 0310 	add.w	r3, r7, #16
 8005f12:	4611      	mov	r1, r2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7ff fcc1 	bl	800589c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f1e:	d9e9      	bls.n	8005ef4 <_VPrintTarget+0x314>
        break;
 8005f20:	e01c      	b.n	8005f5c <_VPrintTarget+0x37c>
            break;
 8005f22:	bf00      	nop
        break;
 8005f24:	e01a      	b.n	8005f5c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	1d19      	adds	r1, r3, #4
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	6011      	str	r1, [r2, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005f34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f36:	f107 0010 	add.w	r0, r7, #16
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	2308      	movs	r3, #8
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	2308      	movs	r3, #8
 8005f44:	2210      	movs	r2, #16
 8005f46:	f7ff fd25 	bl	8005994 <_PrintUnsigned>
        break;
 8005f4a:	e007      	b.n	8005f5c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	2125      	movs	r1, #37	@ 0x25
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fca2 	bl	800589c <_StoreChar>
        break;
 8005f58:	e000      	b.n	8005f5c <_VPrintTarget+0x37c>
      default:
        break;
 8005f5a:	bf00      	nop
      }
      sFormat++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
 8005f62:	e007      	b.n	8005f74 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005f64:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fc94 	bl	800589c <_StoreChar>
    }
  } while (*sFormat);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f47f ae4d 	bne.w	8005c18 <_VPrintTarget+0x38>
 8005f7e:	e000      	b.n	8005f82 <_VPrintTarget+0x3a2>
      break;
 8005f80:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d041      	beq.n	800600c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005f88:	6a3a      	ldr	r2, [r7, #32]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f98:	e00b      	b.n	8005fb2 <_VPrintTarget+0x3d2>
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fa0:	1c59      	adds	r1, r3, #1
 8005fa2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005fa4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fae:	09db      	lsrs	r3, r3, #7
 8005fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fb6:	d8f0      	bhi.n	8005f9a <_VPrintTarget+0x3ba>
 8005fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fcc:	2300      	movs	r3, #0
 8005fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd0:	e00b      	b.n	8005fea <_VPrintTarget+0x40a>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd8:	1c59      	adds	r1, r3, #1
 8005fda:	6379      	str	r1, [r7, #52]	@ 0x34
 8005fdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fee:	d8f0      	bhi.n	8005fd2 <_VPrintTarget+0x3f2>
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	637a      	str	r2, [r7, #52]	@ 0x34
 8005ff6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ffe:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6979      	ldr	r1, [r7, #20]
 8006004:	221a      	movs	r2, #26
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fad8 	bl	80055bc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800600c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006012:	bf00      	nop
 8006014:	3758      	adds	r7, #88	@ 0x58
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	0800716c 	.word	0x0800716c

08006020 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800602e:	2300      	movs	r3, #0
 8006030:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006034:	4917      	ldr	r1, [pc, #92]	@ (8006094 <SEGGER_SYSVIEW_Init+0x74>)
 8006036:	4818      	ldr	r0, [pc, #96]	@ (8006098 <SEGGER_SYSVIEW_Init+0x78>)
 8006038:	f7ff f8c8 	bl	80051cc <SEGGER_RTT_AllocUpBuffer>
 800603c:	4603      	mov	r3, r0
 800603e:	b2da      	uxtb	r2, r3
 8006040:	4b16      	ldr	r3, [pc, #88]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006042:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006044:	4b15      	ldr	r3, [pc, #84]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006046:	785a      	ldrb	r2, [r3, #1]
 8006048:	4b14      	ldr	r3, [pc, #80]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 800604a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800604c:	4b13      	ldr	r3, [pc, #76]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 800604e:	7e1b      	ldrb	r3, [r3, #24]
 8006050:	4618      	mov	r0, r3
 8006052:	2300      	movs	r3, #0
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	2308      	movs	r3, #8
 8006058:	4a11      	ldr	r2, [pc, #68]	@ (80060a0 <SEGGER_SYSVIEW_Init+0x80>)
 800605a:	490f      	ldr	r1, [pc, #60]	@ (8006098 <SEGGER_SYSVIEW_Init+0x78>)
 800605c:	f7ff f93a 	bl	80052d4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006060:	4b0e      	ldr	r3, [pc, #56]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006062:	2200      	movs	r2, #0
 8006064:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006066:	4b0f      	ldr	r3, [pc, #60]	@ (80060a4 <SEGGER_SYSVIEW_Init+0x84>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a0c      	ldr	r2, [pc, #48]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 800606c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800606e:	4a0b      	ldr	r2, [pc, #44]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006074:	4a09      	ldr	r2, [pc, #36]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800607a:	4a08      	ldr	r2, [pc, #32]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006080:	4a06      	ldr	r2, [pc, #24]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006086:	4b05      	ldr	r3, [pc, #20]	@ (800609c <SEGGER_SYSVIEW_Init+0x7c>)
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2001338c 	.word	0x2001338c
 8006098:	08007174 	.word	0x08007174
 800609c:	20014394 	.word	0x20014394
 80060a0:	2001438c 	.word	0x2001438c
 80060a4:	e0001004 	.word	0xe0001004

080060a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80060b0:	4a04      	ldr	r2, [pc, #16]	@ (80060c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6113      	str	r3, [r2, #16]
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20014394 	.word	0x20014394

080060c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	f04f 0120 	mov.w	r1, #32
 80060d8:	f381 8811 	msr	BASEPRI, r1
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	4808      	ldr	r0, [pc, #32]	@ (8006100 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060e0:	f7ff f97d 	bl	80053de <_PreparePacket>
 80060e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68b8      	ldr	r0, [r7, #8]
 80060ec:	f7ff fa66 	bl	80055bc <_SendPacket>
  RECORD_END();
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f383 8811 	msr	BASEPRI, r3
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200143c4 	.word	0x200143c4

08006104 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800610e:	f3ef 8311 	mrs	r3, BASEPRI
 8006112:	f04f 0120 	mov.w	r1, #32
 8006116:	f381 8811 	msr	BASEPRI, r1
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	4816      	ldr	r0, [pc, #88]	@ (8006178 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800611e:	f7ff f95e 	bl	80053de <_PreparePacket>
 8006122:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	b2da      	uxtb	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	61f9      	str	r1, [r7, #28]
 800613c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b7f      	cmp	r3, #127	@ 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	61fa      	str	r2, [r7, #28]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	6938      	ldr	r0, [r7, #16]
 8006166:	f7ff fa29 	bl	80055bc <_SendPacket>
  RECORD_END();
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f383 8811 	msr	BASEPRI, r3
}
 8006170:	bf00      	nop
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	200143c4 	.word	0x200143c4

0800617c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	@ 0x30
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006188:	f3ef 8311 	mrs	r3, BASEPRI
 800618c:	f04f 0120 	mov.w	r1, #32
 8006190:	f381 8811 	msr	BASEPRI, r1
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	4825      	ldr	r0, [pc, #148]	@ (800622c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006198:	f7ff f921 	bl	80053de <_PreparePacket>
 800619c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061aa:	e00b      	b.n	80061c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b2:	1c59      	adds	r1, r3, #1
 80061b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	09db      	lsrs	r3, r3, #7
 80061c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c8:	d8f0      	bhi.n	80061ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	623b      	str	r3, [r7, #32]
 80061e2:	e00b      	b.n	80061fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80061ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	09db      	lsrs	r3, r3, #7
 80061fa:	623b      	str	r3, [r7, #32]
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006200:	d8f0      	bhi.n	80061e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	627a      	str	r2, [r7, #36]	@ 0x24
 8006208:	6a3a      	ldr	r2, [r7, #32]
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	6979      	ldr	r1, [r7, #20]
 8006216:	69b8      	ldr	r0, [r7, #24]
 8006218:	f7ff f9d0 	bl	80055bc <_SendPacket>
  RECORD_END();
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f383 8811 	msr	BASEPRI, r3
}
 8006222:	bf00      	nop
 8006224:	3730      	adds	r7, #48	@ 0x30
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200143c4 	.word	0x200143c4

08006230 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	@ 0x30
 8006234:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006236:	4b59      	ldr	r3, [pc, #356]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800623c:	f3ef 8311 	mrs	r3, BASEPRI
 8006240:	f04f 0120 	mov.w	r1, #32
 8006244:	f381 8811 	msr	BASEPRI, r1
 8006248:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800624a:	4b54      	ldr	r3, [pc, #336]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 800624c:	785b      	ldrb	r3, [r3, #1]
 800624e:	220a      	movs	r2, #10
 8006250:	4953      	ldr	r1, [pc, #332]	@ (80063a0 <SEGGER_SYSVIEW_Start+0x170>)
 8006252:	4618      	mov	r0, r3
 8006254:	f7f9 ffcc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800625e:	f7fe fc87 	bl	8004b70 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006262:	200a      	movs	r0, #10
 8006264:	f7ff ff30 	bl	80060c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006268:	f3ef 8311 	mrs	r3, BASEPRI
 800626c:	f04f 0120 	mov.w	r1, #32
 8006270:	f381 8811 	msr	BASEPRI, r1
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	484b      	ldr	r0, [pc, #300]	@ (80063a4 <SEGGER_SYSVIEW_Start+0x174>)
 8006278:	f7ff f8b1 	bl	80053de <_PreparePacket>
 800627c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006286:	4b45      	ldr	r3, [pc, #276]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_Start+0x76>
 800628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006298:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_Start+0x5e>
 80062ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c0:	4b36      	ldr	r3, [pc, #216]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	623b      	str	r3, [r7, #32]
 80062c6:	e00b      	b.n	80062e0 <SEGGER_SYSVIEW_Start+0xb0>
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	6279      	str	r1, [r7, #36]	@ 0x24
 80062d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	09db      	lsrs	r3, r3, #7
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e4:	d8f0      	bhi.n	80062c8 <SEGGER_SYSVIEW_Start+0x98>
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	4b28      	ldr	r3, [pc, #160]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_Start+0xea>
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	61f9      	str	r1, [r7, #28]
 800630c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b7f      	cmp	r3, #127	@ 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_Start+0xd2>
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	61fa      	str	r2, [r7, #28]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	2300      	movs	r3, #0
 8006336:	613b      	str	r3, [r7, #16]
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_Start+0x122>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	6179      	str	r1, [r7, #20]
 8006344:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	613b      	str	r3, [r7, #16]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b7f      	cmp	r3, #127	@ 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_Start+0x10a>
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	617a      	str	r2, [r7, #20]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006368:	2218      	movs	r2, #24
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7ff f925 	bl	80055bc <_SendPacket>
      RECORD_END();
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006378:	4b08      	ldr	r3, [pc, #32]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006380:	4b06      	ldr	r3, [pc, #24]	@ (800639c <SEGGER_SYSVIEW_Start+0x16c>)
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006386:	f000 f9eb 	bl	8006760 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800638a:	f000 f9b1 	bl	80066f0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800638e:	f000 fd21 	bl	8006dd4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006392:	bf00      	nop
 8006394:	3730      	adds	r7, #48	@ 0x30
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20014394 	.word	0x20014394
 80063a0:	080071b4 	.word	0x080071b4
 80063a4:	200143c4 	.word	0x200143c4

080063a8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063ae:	f3ef 8311 	mrs	r3, BASEPRI
 80063b2:	f04f 0120 	mov.w	r1, #32
 80063b6:	f381 8811 	msr	BASEPRI, r1
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	480b      	ldr	r0, [pc, #44]	@ (80063ec <SEGGER_SYSVIEW_Stop+0x44>)
 80063be:	f7ff f80e 	bl	80053de <_PreparePacket>
 80063c2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80063c4:	4b0a      	ldr	r3, [pc, #40]	@ (80063f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80063cc:	220b      	movs	r2, #11
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6838      	ldr	r0, [r7, #0]
 80063d2:	f7ff f8f3 	bl	80055bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063d6:	4b06      	ldr	r3, [pc, #24]	@ (80063f0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f383 8811 	msr	BASEPRI, r3
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200143c4 	.word	0x200143c4
 80063f0:	20014394 	.word	0x20014394

080063f4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08c      	sub	sp, #48	@ 0x30
 80063f8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063fa:	f3ef 8311 	mrs	r3, BASEPRI
 80063fe:	f04f 0120 	mov.w	r1, #32
 8006402:	f381 8811 	msr	BASEPRI, r1
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	4845      	ldr	r0, [pc, #276]	@ (8006520 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800640a:	f7fe ffe8 	bl	80053de <_PreparePacket>
 800640e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006418:	4b42      	ldr	r3, [pc, #264]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800641e:	e00b      	b.n	8006438 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800642a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	2b7f      	cmp	r3, #127	@ 0x7f
 800643c:	d8f0      	bhi.n	8006420 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
 8006452:	4b34      	ldr	r3, [pc, #208]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	623b      	str	r3, [r7, #32]
 8006458:	e00b      	b.n	8006472 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	1c59      	adds	r1, r3, #1
 8006462:	6279      	str	r1, [r7, #36]	@ 0x24
 8006464:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006468:	b2d2      	uxtb	r2, r2
 800646a:	701a      	strb	r2, [r3, #0]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	09db      	lsrs	r3, r3, #7
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	2b7f      	cmp	r3, #127	@ 0x7f
 8006476:	d8f0      	bhi.n	800645a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	627a      	str	r2, [r7, #36]	@ 0x24
 800647e:	6a3a      	ldr	r2, [r7, #32]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	61fb      	str	r3, [r7, #28]
 800648c:	4b25      	ldr	r3, [pc, #148]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	61bb      	str	r3, [r7, #24]
 8006492:	e00b      	b.n	80064ac <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	b2da      	uxtb	r2, r3
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	1c59      	adds	r1, r3, #1
 800649c:	61f9      	str	r1, [r7, #28]
 800649e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	09db      	lsrs	r3, r3, #7
 80064aa:	61bb      	str	r3, [r7, #24]
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80064b0:	d8f0      	bhi.n	8006494 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	61fa      	str	r2, [r7, #28]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	e00b      	b.n	80064e4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	1c59      	adds	r1, r3, #1
 80064d4:	6179      	str	r1, [r7, #20]
 80064d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	09db      	lsrs	r3, r3, #7
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e8:	d8f0      	bhi.n	80064cc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	617a      	str	r2, [r7, #20]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064fa:	2218      	movs	r2, #24
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f7ff f85c 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800650a:	4b06      	ldr	r3, [pc, #24]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800650c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006512:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	4798      	blx	r3
  }
}
 8006518:	bf00      	nop
 800651a:	3730      	adds	r7, #48	@ 0x30
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	200143c4 	.word	0x200143c4
 8006524:	20014394 	.word	0x20014394

08006528 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b092      	sub	sp, #72	@ 0x48
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006530:	f3ef 8311 	mrs	r3, BASEPRI
 8006534:	f04f 0120 	mov.w	r1, #32
 8006538:	f381 8811 	msr	BASEPRI, r1
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	486a      	ldr	r0, [pc, #424]	@ (80066e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006540:	f7fe ff4d 	bl	80053de <_PreparePacket>
 8006544:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	647b      	str	r3, [r7, #68]	@ 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b66      	ldr	r3, [pc, #408]	@ (80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	643b      	str	r3, [r7, #64]	@ 0x40
 800655a:	e00b      	b.n	8006574 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800655c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800655e:	b2da      	uxtb	r2, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	6479      	str	r1, [r7, #68]	@ 0x44
 8006566:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006570:	09db      	lsrs	r3, r3, #7
 8006572:	643b      	str	r3, [r7, #64]	@ 0x40
 8006574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006576:	2b7f      	cmp	r3, #127	@ 0x7f
 8006578:	d8f0      	bhi.n	800655c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800657a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006594:	e00b      	b.n	80065ae <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	b2da      	uxtb	r2, r3
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659c:	1c59      	adds	r1, r3, #1
 800659e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80065a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	09db      	lsrs	r3, r3, #7
 80065ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065b2:	d8f0      	bhi.n	8006596 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80065b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	4619      	mov	r1, r3
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7fe fecd 	bl	800536c <_EncodeStr>
 80065d2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065d4:	2209      	movs	r2, #9
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	6938      	ldr	r0, [r7, #16]
 80065da:	f7fe ffef 	bl	80055bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	4b40      	ldr	r3, [pc, #256]	@ (80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80065f2:	e00b      	b.n	800660c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	6379      	str	r1, [r7, #52]	@ 0x34
 80065fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	09db      	lsrs	r3, r3, #7
 800660a:	633b      	str	r3, [r7, #48]	@ 0x30
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006610:	d8f0      	bhi.n	80065f4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	637a      	str	r2, [r7, #52]	@ 0x34
 8006618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006620:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800662c:	e00b      	b.n	8006646 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	09db      	lsrs	r3, r3, #7
 8006644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	2b7f      	cmp	r3, #127	@ 0x7f
 800664a:	d8f0      	bhi.n	800662e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	e00b      	b.n	8006680 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	1c59      	adds	r1, r3, #1
 8006670:	6279      	str	r1, [r7, #36]	@ 0x24
 8006672:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	09db      	lsrs	r3, r3, #7
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b7f      	cmp	r3, #127	@ 0x7f
 8006684:	d8f0      	bhi.n	8006668 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	627a      	str	r2, [r7, #36]	@ 0x24
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	61bb      	str	r3, [r7, #24]
 80066a0:	e00b      	b.n	80066ba <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	1c59      	adds	r1, r3, #1
 80066aa:	61f9      	str	r1, [r7, #28]
 80066ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	701a      	strb	r2, [r3, #0]
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	09db      	lsrs	r3, r3, #7
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066be:	d8f0      	bhi.n	80066a2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	61fa      	str	r2, [r7, #28]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	b2d2      	uxtb	r2, r2
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066d0:	2215      	movs	r2, #21
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6938      	ldr	r0, [r7, #16]
 80066d6:	f7fe ff71 	bl	80055bc <_SendPacket>
  RECORD_END();
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f383 8811 	msr	BASEPRI, r3
}
 80066e0:	bf00      	nop
 80066e2:	3748      	adds	r7, #72	@ 0x48
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200143c4 	.word	0x200143c4
 80066ec:	20014394 	.word	0x20014394

080066f0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006706:	4b03      	ldr	r3, [pc, #12]	@ (8006714 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4798      	blx	r3
  }
}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20014394 	.word	0x20014394

08006718 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006720:	f3ef 8311 	mrs	r3, BASEPRI
 8006724:	f04f 0120 	mov.w	r1, #32
 8006728:	f381 8811 	msr	BASEPRI, r1
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	480b      	ldr	r0, [pc, #44]	@ (800675c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006730:	f7fe fe55 	bl	80053de <_PreparePacket>
 8006734:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006736:	2280      	movs	r2, #128	@ 0x80
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	6938      	ldr	r0, [r7, #16]
 800673c:	f7fe fe16 	bl	800536c <_EncodeStr>
 8006740:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006742:	220e      	movs	r2, #14
 8006744:	68f9      	ldr	r1, [r7, #12]
 8006746:	6938      	ldr	r0, [r7, #16]
 8006748:	f7fe ff38 	bl	80055bc <_SendPacket>
  RECORD_END();
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f383 8811 	msr	BASEPRI, r3
}
 8006752:	bf00      	nop
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200143c4 	.word	0x200143c4

08006760 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006766:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01a      	beq.n	80067a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800676e:	4b13      	ldr	r3, [pc, #76]	@ (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006778:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4798      	blx	r3
 8006780:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006784:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	000a      	movs	r2, r1
 8006794:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006796:	4613      	mov	r3, r2
 8006798:	461a      	mov	r2, r3
 800679a:	4621      	mov	r1, r4
 800679c:	200d      	movs	r0, #13
 800679e:	f7ff fced 	bl	800617c <SEGGER_SYSVIEW_RecordU32x2>
 80067a2:	e006      	b.n	80067b2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80067a4:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4619      	mov	r1, r3
 80067aa:	200c      	movs	r0, #12
 80067ac:	f7ff fcaa 	bl	8006104 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80067b0:	bf00      	nop
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd90      	pop	{r4, r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20014394 	.word	0x20014394
 80067c0:	e0001004 	.word	0xe0001004

080067c4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067ca:	f3ef 8311 	mrs	r3, BASEPRI
 80067ce:	f04f 0120 	mov.w	r1, #32
 80067d2:	f381 8811 	msr	BASEPRI, r1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	4819      	ldr	r0, [pc, #100]	@ (8006840 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80067da:	f7fe fe00 	bl	80053de <_PreparePacket>
 80067de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80067e4:	4b17      	ldr	r3, [pc, #92]	@ (8006844 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ec:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	6179      	str	r1, [r7, #20]
 8006802:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b7f      	cmp	r3, #127	@ 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	617a      	str	r2, [r7, #20]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006826:	2202      	movs	r2, #2
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	68b8      	ldr	r0, [r7, #8]
 800682c:	f7fe fec6 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f383 8811 	msr	BASEPRI, r3
}
 8006836:	bf00      	nop
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200143c4 	.word	0x200143c4
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800684e:	f3ef 8311 	mrs	r3, BASEPRI
 8006852:	f04f 0120 	mov.w	r1, #32
 8006856:	f381 8811 	msr	BASEPRI, r1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	4807      	ldr	r0, [pc, #28]	@ (800687c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800685e:	f7fe fdbe 	bl	80053de <_PreparePacket>
 8006862:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006864:	2203      	movs	r2, #3
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6838      	ldr	r0, [r7, #0]
 800686a:	f7fe fea7 	bl	80055bc <_SendPacket>
  RECORD_END();
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f383 8811 	msr	BASEPRI, r3
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200143c4 	.word	0x200143c4

08006880 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006886:	f3ef 8311 	mrs	r3, BASEPRI
 800688a:	f04f 0120 	mov.w	r1, #32
 800688e:	f381 8811 	msr	BASEPRI, r1
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	4807      	ldr	r0, [pc, #28]	@ (80068b4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006896:	f7fe fda2 	bl	80053de <_PreparePacket>
 800689a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800689c:	2212      	movs	r2, #18
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6838      	ldr	r0, [r7, #0]
 80068a2:	f7fe fe8b 	bl	80055bc <_SendPacket>
  RECORD_END();
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200143c4 	.word	0x200143c4

080068b8 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068c0:	f3ef 8311 	mrs	r3, BASEPRI
 80068c4:	f04f 0120 	mov.w	r1, #32
 80068c8:	f381 8811 	msr	BASEPRI, r1
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	4817      	ldr	r0, [pc, #92]	@ (800692c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80068d0:	f7fe fd85 	bl	80053de <_PreparePacket>
 80068d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	e00b      	b.n	80068fc <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	1c59      	adds	r1, r3, #1
 80068ec:	61f9      	str	r1, [r7, #28]
 80068ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	09db      	lsrs	r3, r3, #7
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006900:	d8f0      	bhi.n	80068e4 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006912:	221c      	movs	r2, #28
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6938      	ldr	r0, [r7, #16]
 8006918:	f7fe fe50 	bl	80055bc <_SendPacket>
  RECORD_END();
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f383 8811 	msr	BASEPRI, r3
}
 8006922:	bf00      	nop
 8006924:	3720      	adds	r7, #32
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200143c4 	.word	0x200143c4

08006930 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8006930:	b580      	push	{r7, lr}
 8006932:	b08a      	sub	sp, #40	@ 0x28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800693a:	f3ef 8311 	mrs	r3, BASEPRI
 800693e:	f04f 0120 	mov.w	r1, #32
 8006942:	f381 8811 	msr	BASEPRI, r1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	4824      	ldr	r0, [pc, #144]	@ (80069dc <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800694a:	f7fe fd48 	bl	80053de <_PreparePacket>
 800694e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	627b      	str	r3, [r7, #36]	@ 0x24
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	623b      	str	r3, [r7, #32]
 800695c:	e00b      	b.n	8006976 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006964:	1c59      	adds	r1, r3, #1
 8006966:	6279      	str	r1, [r7, #36]	@ 0x24
 8006968:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	09db      	lsrs	r3, r3, #7
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b7f      	cmp	r3, #127	@ 0x7f
 800697a:	d8f0      	bhi.n	800695e <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800697c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697e:	1c5a      	adds	r2, r3, #1
 8006980:	627a      	str	r2, [r7, #36]	@ 0x24
 8006982:	6a3a      	ldr	r2, [r7, #32]
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	e00b      	b.n	80069ae <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	1c59      	adds	r1, r3, #1
 800699e:	61f9      	str	r1, [r7, #28]
 80069a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	09db      	lsrs	r3, r3, #7
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80069b2:	d8f0      	bhi.n	8006996 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	61fa      	str	r2, [r7, #28]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80069c4:	221c      	movs	r2, #28
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f7fe fdf7 	bl	80055bc <_SendPacket>
  RECORD_END();
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f383 8811 	msr	BASEPRI, r3
}
 80069d4:	bf00      	nop
 80069d6:	3728      	adds	r7, #40	@ 0x28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	200143c4 	.word	0x200143c4

080069e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069e6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ea:	f04f 0120 	mov.w	r1, #32
 80069ee:	f381 8811 	msr	BASEPRI, r1
 80069f2:	607b      	str	r3, [r7, #4]
 80069f4:	4807      	ldr	r0, [pc, #28]	@ (8006a14 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069f6:	f7fe fcf2 	bl	80053de <_PreparePacket>
 80069fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80069fc:	2211      	movs	r2, #17
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6838      	ldr	r0, [r7, #0]
 8006a02:	f7fe fddb 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f383 8811 	msr	BASEPRI, r3
}
 8006a0c:	bf00      	nop
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	200143c4 	.word	0x200143c4

08006a18 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a20:	f3ef 8311 	mrs	r3, BASEPRI
 8006a24:	f04f 0120 	mov.w	r1, #32
 8006a28:	f381 8811 	msr	BASEPRI, r1
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	4819      	ldr	r0, [pc, #100]	@ (8006a94 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a30:	f7fe fcd5 	bl	80053de <_PreparePacket>
 8006a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a3a:	4b17      	ldr	r3, [pc, #92]	@ (8006a98 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	e00b      	b.n	8006a66 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	61f9      	str	r1, [r7, #28]
 8006a58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	09db      	lsrs	r3, r3, #7
 8006a64:	61bb      	str	r3, [r7, #24]
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a6a:	d8f0      	bhi.n	8006a4e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	61fa      	str	r2, [r7, #28]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	68f9      	ldr	r1, [r7, #12]
 8006a80:	6938      	ldr	r0, [r7, #16]
 8006a82:	f7fe fd9b 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f383 8811 	msr	BASEPRI, r3
}
 8006a8c:	bf00      	nop
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	200143c4 	.word	0x200143c4
 8006a98:	20014394 	.word	0x20014394

08006a9c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b088      	sub	sp, #32
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa8:	f04f 0120 	mov.w	r1, #32
 8006aac:	f381 8811 	msr	BASEPRI, r1
 8006ab0:	617b      	str	r3, [r7, #20]
 8006ab2:	4819      	ldr	r0, [pc, #100]	@ (8006b18 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ab4:	f7fe fc93 	bl	80053de <_PreparePacket>
 8006ab8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006abe:	4b17      	ldr	r3, [pc, #92]	@ (8006b1c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	e00b      	b.n	8006aea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	1c59      	adds	r1, r3, #1
 8006ada:	61f9      	str	r1, [r7, #28]
 8006adc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	09db      	lsrs	r3, r3, #7
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aee:	d8f0      	bhi.n	8006ad2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	61fa      	str	r2, [r7, #28]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b00:	2204      	movs	r2, #4
 8006b02:	68f9      	ldr	r1, [r7, #12]
 8006b04:	6938      	ldr	r0, [r7, #16]
 8006b06:	f7fe fd59 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f383 8811 	msr	BASEPRI, r3
}
 8006b10:	bf00      	nop
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	200143c4 	.word	0x200143c4
 8006b1c:	20014394 	.word	0x20014394

08006b20 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b28:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2c:	f04f 0120 	mov.w	r1, #32
 8006b30:	f381 8811 	msr	BASEPRI, r1
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	4819      	ldr	r0, [pc, #100]	@ (8006b9c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b38:	f7fe fc51 	bl	80053de <_PreparePacket>
 8006b3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b42:	4b17      	ldr	r3, [pc, #92]	@ (8006ba0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	e00b      	b.n	8006b6e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	1c59      	adds	r1, r3, #1
 8006b5e:	61f9      	str	r1, [r7, #28]
 8006b60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	09db      	lsrs	r3, r3, #7
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b72:	d8f0      	bhi.n	8006b56 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	61fa      	str	r2, [r7, #28]
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b84:	2206      	movs	r2, #6
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	6938      	ldr	r0, [r7, #16]
 8006b8a:	f7fe fd17 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f383 8811 	msr	BASEPRI, r3
}
 8006b94:	bf00      	nop
 8006b96:	3720      	adds	r7, #32
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	200143c4 	.word	0x200143c4
 8006ba0:	20014394 	.word	0x20014394

08006ba4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	@ 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bae:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb2:	f04f 0120 	mov.w	r1, #32
 8006bb6:	f381 8811 	msr	BASEPRI, r1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	4827      	ldr	r0, [pc, #156]	@ (8006c5c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006bbe:	f7fe fc0e 	bl	80053de <_PreparePacket>
 8006bc2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bc8:	4b25      	ldr	r3, [pc, #148]	@ (8006c60 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	623b      	str	r3, [r7, #32]
 8006bda:	e00b      	b.n	8006bf4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	1c59      	adds	r1, r3, #1
 8006be4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006be6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	09db      	lsrs	r3, r3, #7
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf8:	d8f0      	bhi.n	8006bdc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c00:	6a3a      	ldr	r2, [r7, #32]
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	e00b      	b.n	8006c2c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	61f9      	str	r1, [r7, #28]
 8006c1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	09db      	lsrs	r3, r3, #7
 8006c2a:	61bb      	str	r3, [r7, #24]
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c30:	d8f0      	bhi.n	8006c14 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006c42:	2207      	movs	r2, #7
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	6938      	ldr	r0, [r7, #16]
 8006c48:	f7fe fcb8 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f383 8811 	msr	BASEPRI, r3
}
 8006c52:	bf00      	nop
 8006c54:	3728      	adds	r7, #40	@ 0x28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200143c4 	.word	0x200143c4
 8006c60:	20014394 	.word	0x20014394

08006c64 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c6c:	4b04      	ldr	r3, [pc, #16]	@ (8006c80 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	1ad3      	subs	r3, r2, r3
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20014394 	.word	0x20014394

08006c84 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08c      	sub	sp, #48	@ 0x30
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c8e:	4b40      	ldr	r3, [pc, #256]	@ (8006d90 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d077      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006c96:	4b3e      	ldr	r3, [pc, #248]	@ (8006d90 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ca0:	e008      	b.n	8006cb4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d3f2      	bcc.n	8006ca2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006cbc:	e000      	b.n	8006cc0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006cbe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d055      	beq.n	8006d72 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cca:	f04f 0120 	mov.w	r1, #32
 8006cce:	f381 8811 	msr	BASEPRI, r1
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	482f      	ldr	r0, [pc, #188]	@ (8006d94 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006cd6:	f7fe fb82 	bl	80053de <_PreparePacket>
 8006cda:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	623b      	str	r3, [r7, #32]
 8006ce8:	e00b      	b.n	8006d02 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	1c59      	adds	r1, r3, #1
 8006cf2:	6279      	str	r1, [r7, #36]	@ 0x24
 8006cf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	09db      	lsrs	r3, r3, #7
 8006d00:	623b      	str	r3, [r7, #32]
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d06:	d8f0      	bhi.n	8006cea <SEGGER_SYSVIEW_SendModule+0x66>
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	b2d2      	uxtb	r2, r2
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d16:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e00b      	b.n	8006d3c <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	1c59      	adds	r1, r3, #1
 8006d2c:	61f9      	str	r1, [r7, #28]
 8006d2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	09db      	lsrs	r3, r3, #7
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d40:	d8f0      	bhi.n	8006d24 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	61fa      	str	r2, [r7, #28]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2280      	movs	r2, #128	@ 0x80
 8006d58:	4619      	mov	r1, r3
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7fe fb06 	bl	800536c <_EncodeStr>
 8006d60:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d62:	2216      	movs	r2, #22
 8006d64:	68f9      	ldr	r1, [r7, #12]
 8006d66:	6938      	ldr	r0, [r7, #16]
 8006d68:	f7fe fc28 	bl	80055bc <_SendPacket>
      RECORD_END();
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModule+0x102>
 8006d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	4798      	blx	r3
    }
  }
}
 8006d86:	bf00      	nop
 8006d88:	3730      	adds	r7, #48	@ 0x30
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	200143bc 	.word	0x200143bc
 8006d94:	200143c4 	.word	0x200143c4

08006d98 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00f      	beq.n	8006dc6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006da6:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f2      	bne.n	8006dac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	200143bc 	.word	0x200143bc

08006dd4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006dda:	f3ef 8311 	mrs	r3, BASEPRI
 8006dde:	f04f 0120 	mov.w	r1, #32
 8006de2:	f381 8811 	msr	BASEPRI, r1
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	4817      	ldr	r0, [pc, #92]	@ (8006e48 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006dea:	f7fe faf8 	bl	80053de <_PreparePacket>
 8006dee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	4b14      	ldr	r3, [pc, #80]	@ (8006e4c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	e00b      	b.n	8006e18 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	1c59      	adds	r1, r3, #1
 8006e08:	6179      	str	r1, [r7, #20]
 8006e0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	09db      	lsrs	r3, r3, #7
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e1c:	d8f0      	bhi.n	8006e00 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	617a      	str	r2, [r7, #20]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e2e:	221b      	movs	r2, #27
 8006e30:	6879      	ldr	r1, [r7, #4]
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f7fe fbc2 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200143c4 	.word	0x200143c4
 8006e4c:	200143c0 	.word	0x200143c0

08006e50 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e50:	b40f      	push	{r0, r1, r2, r3}
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e5e:	1d3b      	adds	r3, r7, #4
 8006e60:	461a      	mov	r2, r3
 8006e62:	2100      	movs	r1, #0
 8006e64:	6938      	ldr	r0, [r7, #16]
 8006e66:	f7fe febb 	bl	8005be0 <_VPrintTarget>
  va_end(ParamList);
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e74:	b004      	add	sp, #16
 8006e76:	4770      	bx	lr

08006e78 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	@ 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e80:	f3ef 8311 	mrs	r3, BASEPRI
 8006e84:	f04f 0120 	mov.w	r1, #32
 8006e88:	f381 8811 	msr	BASEPRI, r1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	4827      	ldr	r0, [pc, #156]	@ (8006f2c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e90:	f7fe faa5 	bl	80053de <_PreparePacket>
 8006e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e96:	2280      	movs	r2, #128	@ 0x80
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	6938      	ldr	r0, [r7, #16]
 8006e9c:	f7fe fa66 	bl	800536c <_EncodeStr>
 8006ea0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	623b      	str	r3, [r7, #32]
 8006eaa:	e00b      	b.n	8006ec4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006eb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	09db      	lsrs	r3, r3, #7
 8006ec2:	623b      	str	r3, [r7, #32]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ec8:	d8f0      	bhi.n	8006eac <SEGGER_SYSVIEW_Warn+0x34>
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e00b      	b.n	8006efc <SEGGER_SYSVIEW_Warn+0x84>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	61f9      	str	r1, [r7, #28]
 8006eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	09db      	lsrs	r3, r3, #7
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f00:	d8f0      	bhi.n	8006ee4 <SEGGER_SYSVIEW_Warn+0x6c>
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	61fa      	str	r2, [r7, #28]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f12:	221a      	movs	r2, #26
 8006f14:	68f9      	ldr	r1, [r7, #12]
 8006f16:	6938      	ldr	r0, [r7, #16]
 8006f18:	f7fe fb50 	bl	80055bc <_SendPacket>
  RECORD_END();
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f383 8811 	msr	BASEPRI, r3
}
 8006f22:	bf00      	nop
 8006f24:	3728      	adds	r7, #40	@ 0x28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200143c4 	.word	0x200143c4

08006f30 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f34:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f36:	7e1b      	ldrb	r3, [r3, #24]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4a13      	ldr	r2, [pc, #76]	@ (8006f88 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	440b      	add	r3, r1
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	336c      	adds	r3, #108	@ 0x6c
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f4c:	7e1b      	ldrb	r3, [r3, #24]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	490d      	ldr	r1, [pc, #52]	@ (8006f88 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f52:	4603      	mov	r3, r0
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	4403      	add	r3, r0
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	440b      	add	r3, r1
 8006f5c:	3370      	adds	r3, #112	@ 0x70
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d00b      	beq.n	8006f7c <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f64:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f66:	789b      	ldrb	r3, [r3, #2]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d107      	bne.n	8006f7c <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f6c:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f6e:	2201      	movs	r2, #1
 8006f70:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f72:	f7fe fa41 	bl	80053f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f76:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f7c:	4b01      	ldr	r3, [pc, #4]	@ (8006f84 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	20014394 	.word	0x20014394
 8006f88:	20012ed4 	.word	0x20012ed4

08006f8c <memcmp>:
 8006f8c:	b510      	push	{r4, lr}
 8006f8e:	3901      	subs	r1, #1
 8006f90:	4402      	add	r2, r0
 8006f92:	4290      	cmp	r0, r2
 8006f94:	d101      	bne.n	8006f9a <memcmp+0xe>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e005      	b.n	8006fa6 <memcmp+0x1a>
 8006f9a:	7803      	ldrb	r3, [r0, #0]
 8006f9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d001      	beq.n	8006fa8 <memcmp+0x1c>
 8006fa4:	1b18      	subs	r0, r3, r4
 8006fa6:	bd10      	pop	{r4, pc}
 8006fa8:	3001      	adds	r0, #1
 8006faa:	e7f2      	b.n	8006f92 <memcmp+0x6>

08006fac <memset>:
 8006fac:	4402      	add	r2, r0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d100      	bne.n	8006fb6 <memset+0xa>
 8006fb4:	4770      	bx	lr
 8006fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fba:	e7f9      	b.n	8006fb0 <memset+0x4>

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1b64      	subs	r4, r4, r5
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	42a6      	cmp	r6, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	@ (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 f826 	bl	8007020 <_init>
 8006fd4:	1b64      	subs	r4, r4, r5
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2600      	movs	r6, #0
 8006fda:	42a6      	cmp	r6, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe4:	4798      	blx	r3
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fee:	4798      	blx	r3
 8006ff0:	3601      	adds	r6, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	080071d8 	.word	0x080071d8
 8006ff8:	080071d8 	.word	0x080071d8
 8006ffc:	080071d8 	.word	0x080071d8
 8007000:	080071dc 	.word	0x080071dc

08007004 <memcpy>:
 8007004:	440a      	add	r2, r1
 8007006:	4291      	cmp	r1, r2
 8007008:	f100 33ff 	add.w	r3, r0, #4294967295
 800700c:	d100      	bne.n	8007010 <memcpy+0xc>
 800700e:	4770      	bx	lr
 8007010:	b510      	push	{r4, lr}
 8007012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007016:	f803 4f01 	strb.w	r4, [r3, #1]!
 800701a:	4291      	cmp	r1, r2
 800701c:	d1f9      	bne.n	8007012 <memcpy+0xe>
 800701e:	bd10      	pop	{r4, pc}

08007020 <_init>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr

0800702c <_fini>:
 800702c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702e:	bf00      	nop
 8007030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007032:	bc08      	pop	{r3}
 8007034:	469e      	mov	lr, r3
 8007036:	4770      	bx	lr
